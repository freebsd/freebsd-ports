--- external/collada2gltf/patches/kill_c++11_code.patch.1.orig	2014-11-10 06:52:56.000000000 -0500
+++ external/collada2gltf/patches/kill_c++11_code.patch.1	2014-12-05 12:32:23.000000000 -0500
@@ -1531,8 +1531,8 @@
  
  
 diff -ur collada2gltf.org/extensions/o3dgc-compression/GLTF-Open3DGC.cpp collada2gltf/extensions/o3dgc-compression/GLTF-Open3DGC.cpp
---- collada2gltf.org/extensions/o3dgc-compression/GLTF-Open3DGC.cpp	2014-09-29 15:30:40.134494471 +0200
-+++ collada2gltf/extensions/o3dgc-compression/GLTF-Open3DGC.cpp	2014-09-29 15:55:51.898551665 +0200
+--- collada2gltf.org/extensions/o3dgc-compression/GLTF-Open3DGC.cpp	2014-05-25 05:30:45.143840000 -0400
++++ collada2gltf/extensions/o3dgc-compression/GLTF-Open3DGC.cpp	2014-10-31 01:56:34.000000000 -0400
 @@ -138,7 +138,7 @@
          return true;
      }
@@ -1563,7 +1563,7 @@
          
          for (unsigned int i = 0 ; i < primitivesCount ; i++) {
 -            shared_ptr<GLTF::GLTFPrimitive> primitive = static_pointer_cast<GLTFPrimitive>(primitives[i]);
-+            boost::shared_ptr<GLTF::GLTFPrimitive> primitive = static_pointer_cast<GLTFPrimitive>(primitives[i]);
++            boost::shared_ptr<GLTF::GLTFPrimitive> primitive = boost::static_pointer_cast<GLTFPrimitive>(primitives[i]);
              if (primitive->getPrimitive() != profile->getGLenumForString("TRIANGLES")) {
                  return false;
              }
@@ -1590,7 +1590,7 @@
          for (unsigned int i = 0 ; i < primitivesCount ; i++) {
 -            shared_ptr<GLTF::GLTFPrimitive> primitive = static_pointer_cast<GLTFPrimitive>(primitives[i]);
 -            shared_ptr <GLTF::GLTFAccessor> uniqueIndices = primitive->getIndices();
-+            boost::shared_ptr<GLTF::GLTFPrimitive> primitive = static_pointer_cast<GLTFPrimitive>(primitives[i]);
++            boost::shared_ptr<GLTF::GLTFPrimitive> primitive = boost::static_pointer_cast<GLTFPrimitive>(primitives[i]);
 +            boost::shared_ptr <GLTF::GLTFAccessor> uniqueIndices = primitive->getIndices();
              unsigned int indicesCount = (unsigned int)(uniqueIndices->getCount());
              //FIXME: assumes triangles, but we are guarded from issues by canEncodeOpen3DGCMesh
@@ -1601,7 +1601,7 @@
              allTrianglesCount += trianglesCount;
 -            shared_ptr<GLTF::GLTFPrimitive> primitive = static_pointer_cast<GLTFPrimitive>(primitives[i]);
 -            shared_ptr <GLTF::GLTFAccessor> uniqueIndices = primitive->getIndices();
-+            boost::shared_ptr<GLTF::GLTFPrimitive> primitive = static_pointer_cast<GLTFPrimitive>(primitives[i]);
++            boost::shared_ptr<GLTF::GLTFPrimitive> primitive = boost::static_pointer_cast<GLTFPrimitive>(primitives[i]);
 +            boost::shared_ptr <GLTF::GLTFAccessor> uniqueIndices = primitive->getIndices();
              unsigned int indicesCount = (unsigned int)(uniqueIndices->getCount());
              unsigned int* indicesPtr = (unsigned int*)uniqueIndices->getBufferView()->getBufferDataByApplyingOffset();
@@ -1620,7 +1620,7 @@
          params.SetNumFloatAttributes(nFloatAttributes);
          ifs.SetNumFloatAttributes(nFloatAttributes);
 -        shared_ptr<JSONObject> compressionObject = static_pointer_cast<JSONObject>(mesh->getExtensions()->createObjectIfNeeded("Open3DGC-compression"));
-+        boost::shared_ptr<JSONObject> compressionObject = static_pointer_cast<JSONObject>(mesh->getExtensions()->createObjectIfNeeded("Open3DGC-compression"));
++        boost::shared_ptr<JSONObject> compressionObject = boost::static_pointer_cast<JSONObject>(mesh->getExtensions()->createObjectIfNeeded("Open3DGC-compression"));
          
          ifs.ComputeMinMax(O3DGC_SC3DMC_MAX_ALL_DIMS);
          BinaryStream bstream(vertexCount * 8);
@@ -4251,9 +4251,30 @@
  
  #endif
 diff -ur collada2gltf.org/helpers/geometryHelpers.cpp collada2gltf/helpers/geometryHelpers.cpp
---- collada2gltf.org/helpers/geometryHelpers.cpp	2014-09-29 15:30:40.146494472 +0200
-+++ collada2gltf/helpers/geometryHelpers.cpp	2014-09-29 16:01:12.134563781 +0200
-@@ -193,8 +193,8 @@
+--- collada2gltf.org/helpers/geometryHelpers.cpp	2014-05-25 05:30:45.143840000 -0400
++++ collada2gltf/helpers/geometryHelpers.cpp	2014-12-05 12:27:58.000000000 -0500
+@@ -26,6 +26,8 @@
+ #include <stdlib.h>
+ #include "geometryHelpers.h"
+ 
++#include <boost/unordered_map.hpp>
++
+ using namespace rapidjson;
+ #if __cplusplus <= 199711L
+ using namespace std::tr1;
+@@ -121,9 +123,9 @@
+         }
+     };
+     
+-    typedef unordered_map<unsigned int* ,unsigned int /* index of existing n-uplet of indices */, RemappedMeshIndexesHash, RemappedMeshIndexesEq> RemappedMeshIndexesHashmap;
++    typedef boost::unordered_map<unsigned int* ,unsigned int /* index of existing n-uplet of indices */, RemappedMeshIndexesHash, RemappedMeshIndexesEq> RemappedMeshIndexesHashmap;
+ 
+-    typedef unordered_map<unsigned int ,unsigned int> IndicesMap;
++    typedef boost::unordered_map<unsigned int ,unsigned int> IndicesMap;
+     
+     //FIXME: this could be just an intermediate anonymous(no id) GLTFBuffer
+     class GLTFPrimitiveRemapInfos
+@@ -193,8 +195,8 @@
          for (size_t meshAttributeIndex = 0 ; meshAttributeIndex < count; meshAttributeIndex++) {
              MeshAttributesBufferInfos *bufferInfos = &allBufferInfos[meshAttributeIndex];
              
@@ -4264,7 +4285,7 @@
              
              if (originalMeshAttribute->elementByteLength() != remappedMeshAttribute->elementByteLength()) {
                  // FIXME : report error
-@@ -213,12 +213,12 @@
+@@ -213,12 +215,12 @@
          return allBufferInfos;
      }
      
@@ -4280,7 +4301,7 @@
                                    unsigned int* remapTableForPositions /* we fill/keep this to be able to remap skin weight/bone indices later on*/)
      {
          size_t indicesSize = allIndices.size();
-@@ -267,14 +267,14 @@
+@@ -267,14 +269,14 @@
      }
      
      
@@ -4298,7 +4319,7 @@
      {
          unsigned int generatedIndicesCount = 0;
  
-@@ -317,10 +317,10 @@
+@@ -317,10 +319,10 @@
          }
          
          endIndex = currentIndex;
@@ -4312,7 +4333,7 @@
          
          indices->setBufferView(indicesBufferView);
          indices->setCount(vertexIndicesCount);
-@@ -334,20 +334,20 @@
+@@ -334,20 +336,20 @@
  
  #define DUMP_UNIFIED_INDEXES_INFO 0
      
@@ -4338,7 +4359,7 @@
          printf("vertex source cout :%d\n",(int)vertexSource->getCount());
          }
  #endif
-@@ -358,7 +358,7 @@
+@@ -358,7 +360,7 @@
          
          if (primitiveCount == 0) {
              // FIXME: report error
@@ -4347,7 +4368,7 @@
          }
          
          //in originalMeshAttributes we'll get the flattened list of all the meshAttributes as a vector.
-@@ -370,7 +370,7 @@
+@@ -370,7 +372,7 @@
              GLTF::Semantic semantic = allSemantics[i];
              size_t attributesCount = sourceMesh->getMeshAttributesCountForSemantic(semantic);
              for (size_t j = 0 ; j < attributesCount ; j ++) {
@@ -4356,7 +4377,7 @@
                  unsigned int indexSet = j;
                  std::string semanticIndexSetKey = keyWithSemanticAndSet(semantic, indexSet);
                  unsigned int size = (unsigned int)originalMeshAttributes.size();
-@@ -382,16 +382,16 @@
+@@ -382,16 +384,16 @@
          
          maxVertexAttributes = (unsigned int)originalMeshAttributes.size();
          
@@ -4372,23 +4393,23 @@
              unsigned int* indicesInRemapping = (unsigned int*)malloc(sizeof(unsigned int) * allIndices->size());
              
 -            shared_ptr<GLTFPrimitive> sourcePrimitive = static_pointer_cast<GLTFPrimitive>(sourcePrimitives[i]);
-+            boost::shared_ptr<GLTFPrimitive> sourcePrimitive = static_pointer_cast<GLTFPrimitive>(sourcePrimitives[i]);
++            boost::shared_ptr<GLTFPrimitive> sourcePrimitive = boost::static_pointer_cast<GLTFPrimitive>(sourcePrimitives[i]);
              VertexAttributeVector vertexAttributes = sourcePrimitive->getVertexAttributes();
              for (unsigned int k = 0 ; k < allIndices->size() ; k++) {
                  GLTF::Semantic semantic = vertexAttributes[k]->getSemantic();
-@@ -401,9 +401,9 @@
+@@ -401,9 +403,9 @@
                  indicesInRemapping[k] = idx;
              }
              
 -            shared_ptr<GLTFPrimitive> targetPrimitive = static_pointer_cast<GLTFPrimitive>(targetPrimitives[i]);
-+            boost::shared_ptr<GLTFPrimitive> targetPrimitive = static_pointer_cast<GLTFPrimitive>(targetPrimitives[i]);
++            boost::shared_ptr<GLTFPrimitive> targetPrimitive = boost::static_pointer_cast<GLTFPrimitive>(targetPrimitives[i]);
              
 -            shared_ptr<GLTF::GLTFPrimitiveRemapInfos> primitiveRemapInfos = __BuildPrimitiveUniqueIndexes(targetPrimitive, *allIndices, remappedMeshIndexesMap, indicesInRemapping, startIndex, maxVertexAttributes, endIndex, profile);
 +            boost::shared_ptr<GLTF::GLTFPrimitiveRemapInfos> primitiveRemapInfos = __BuildPrimitiveUniqueIndexes(targetPrimitive, *allIndices, remappedMeshIndexesMap, indicesInRemapping, startIndex, maxVertexAttributes, endIndex, profile);
              
              free(indicesInRemapping);
              
-@@ -412,7 +412,7 @@
+@@ -412,7 +414,7 @@
                  allPrimitiveRemapInfos.push_back(primitiveRemapInfos);
              } else {
                  // FIXME: report error
@@ -4397,7 +4418,7 @@
              }
          }
          
-@@ -427,14 +427,14 @@
+@@ -427,14 +429,14 @@
              GLTF::Semantic semantic = allSemantics[i];
              size_t attributesCount = sourceMesh->getMeshAttributesCountForSemantic(semantic);
              for (size_t j = 0 ; j < attributesCount ; j ++) {
@@ -4416,7 +4437,7 @@
                  remappedMeshAttribute->setBufferView(remappedBufferView);
                  remappedMeshAttribute->setCount(vertexCount);
                  
-@@ -452,10 +452,10 @@
+@@ -452,10 +454,10 @@
           */
          
          for (unsigned int i = 0 ; i < primitiveCount ; i++) {
@@ -4425,20 +4446,20 @@
              IndicesVector *allIndices = allIndicesSharedPtr.get();
              unsigned int* indicesInRemapping = (unsigned int*)calloc(sizeof(unsigned int) * (*allIndices).size(), 1);
 -            shared_ptr<GLTFPrimitive> sourcePrimitive = static_pointer_cast<GLTFPrimitive>(sourcePrimitives[i]);
-+            boost::shared_ptr<GLTFPrimitive> sourcePrimitive = static_pointer_cast<GLTFPrimitive>(sourcePrimitives[i]);
++            boost::shared_ptr<GLTFPrimitive> sourcePrimitive = boost::static_pointer_cast<GLTFPrimitive>(sourcePrimitives[i]);
              VertexAttributeVector vertexAttributes = sourcePrimitive->getVertexAttributes();
              
              for (unsigned int k = 0 ; k < (*allIndices).size() ; k++) {
-@@ -466,7 +466,7 @@
+@@ -466,7 +468,7 @@
                  indicesInRemapping[k] = idx;
              }
              
 -            shared_ptr<GLTFPrimitive> targetPrimitive = static_pointer_cast<GLTFPrimitive>(targetPrimitives[i]);
-+            boost::shared_ptr<GLTFPrimitive> targetPrimitive = static_pointer_cast<GLTFPrimitive>(targetPrimitives[i]);
++            boost::shared_ptr<GLTFPrimitive> targetPrimitive = boost::static_pointer_cast<GLTFPrimitive>(targetPrimitives[i]);
              bool status = __RemapPrimitiveVertices(targetPrimitive,
                                                     (*allIndices),
                                                     originalMeshAttributes ,
-@@ -478,13 +478,13 @@
+@@ -478,13 +480,13 @@
              
              if (!status) {
                  // FIXME: report error
@@ -4454,7 +4475,7 @@
              printf("vertex dest count :%d\n",(int)vertexSource->getCount());
          }
  #endif
-@@ -496,7 +496,7 @@
+@@ -496,7 +498,7 @@
      
      class SubMeshContext {
      public:
@@ -4463,7 +4484,7 @@
          //For each sub mesh being built, maintain 2 maps,
          //with key:indice value: remapped indice
          IndicesMap indexToRemappedIndex;
-@@ -505,7 +505,7 @@
+@@ -505,7 +507,7 @@
      SubMeshContext* __CreateSubMeshContext(const std::string& id)
      {
          SubMeshContext *subMesh = new SubMeshContext();
@@ -4472,7 +4493,7 @@
          targetMesh->setID(id);
          subMesh->targetMesh = targetMesh;
          
-@@ -554,9 +554,9 @@
+@@ -554,9 +556,9 @@
              GLTF::Semantic semantic = allSemantics[i];
              size_t attributesCount = sourceMesh->getMeshAttributesCountForSemantic(semantic);
              for (size_t j = 0 ; j < attributesCount ; j ++) {
@@ -4484,7 +4505,7 @@
                  
  				unsigned int vertexAttributeCount = (unsigned int)subMesh->indexToRemappedIndex.size();
                  
-@@ -568,10 +568,10 @@
+@@ -568,10 +570,10 @@
                  context[1] = subMesh;
                  selectedMeshAttribute->applyOnAccessor(__RemapMeshAttribute, (void*)context);
                                          
@@ -4497,7 +4518,7 @@
                  remappedMeshAttribute->setBufferView(remappedBufferView);
                  remappedMeshAttribute->setCount(vertexAttributeCount);
                  
-@@ -580,35 +580,35 @@
+@@ -580,35 +582,35 @@
          }
      }
      
@@ -4511,7 +4532,7 @@
          
          for (size_t i = 0 ; i < primitives.size() ; i++) {
 -            shared_ptr<GLTFPrimitive> primitive = static_pointer_cast<GLTFPrimitive>(primitives[i]);
-+            boost::shared_ptr<GLTFPrimitive> primitive = static_pointer_cast<GLTFPrimitive>(primitives[i]);
++            boost::shared_ptr<GLTFPrimitive> primitive = boost::static_pointer_cast<GLTFPrimitive>(primitives[i]);
          }
          
          if (!splitNeeded)
@@ -4541,7 +4562,7 @@
                      subMesh = __CreateSubMeshContext(sourceMesh->getID());
                      targetMesh = subMesh->targetMesh;
                  }
-@@ -628,15 +628,15 @@
+@@ -628,15 +630,15 @@
                  meshIndex++;
              }
              
@@ -4549,7 +4570,7 @@
 +            boost::shared_ptr <GLTFPrimitive> targetPrimitive;
              //when we are done with a primitive we mark its nextIndice with a -1
 -            shared_ptr<GLTFPrimitive> primitive = static_pointer_cast<GLTFPrimitive> (primitives[i]);
-+            boost::shared_ptr<GLTFPrimitive> primitive = static_pointer_cast<GLTFPrimitive> (primitives[i]);
++            boost::shared_ptr<GLTFPrimitive> primitive = boost::static_pointer_cast<GLTFPrimitive> (primitives[i]);
  
 -            targetPrimitive = shared_ptr <GLTFPrimitive> (new GLTFPrimitive((*primitive)));
 +            targetPrimitive = boost::shared_ptr <GLTFPrimitive> (new GLTFPrimitive((*primitive)));
@@ -4561,7 +4582,7 @@
              
              unsigned int* indicesPtr = (unsigned int*)indices->getBufferView()->getBufferDataByApplyingOffset();
              unsigned int* targetIndicesPtr = (unsigned int*)malloc(indices->getBufferView()->getBuffer()->getByteLength());
-@@ -690,9 +690,9 @@
+@@ -690,9 +692,9 @@
              allNextPrimitiveIndices[i] = nextPrimitiveIndex;
  
              if (targetIndicesCount > 0) {
@@ -4573,7 +4594,7 @@
  
                  indices->setBufferView(targetBufferView);
                  indices->setCount(targetIndicesCount);
-@@ -728,7 +728,7 @@
+@@ -728,7 +730,7 @@
      //Not required anymore since Open3DGC supports now sharing same vertex buffer and WebGL is disabled
      //DO NOT REMOVE - might be useful again someday
      /*
@@ -4582,7 +4603,7 @@
          GLTF::JSONValueVector primitives = sourceMesh->getPrimitives()->values();
          if (primitives.size() == 1) {
              return false;
-@@ -738,9 +738,9 @@
+@@ -738,9 +740,9 @@
          
          for (size_t i = 0 ; i < primitiveCount ; i++) {
              IndicesMap remappedIndices;
@@ -4590,12 +4611,12 @@
 -            shared_ptr <GLTFPrimitive> refPrimitive = static_pointer_cast<GLTFPrimitive>(primitives[i]);
 -            shared_ptr <GLTFPrimitive> targetPrimitive = shared_ptr <GLTFPrimitive> (new GLTFPrimitive((*refPrimitive)));
 +            boost::shared_ptr <GLTFMesh> targetMesh = boost::shared_ptr <GLTFMesh> (new GLTFMesh());
-+            boost::shared_ptr <GLTFPrimitive> refPrimitive = static_pointer_cast<GLTFPrimitive>(primitives[i]);
++            boost::shared_ptr <GLTFPrimitive> refPrimitive = boost::static_pointer_cast<GLTFPrimitive>(primitives[i]);
 +            boost::shared_ptr <GLTFPrimitive> targetPrimitive = boost::shared_ptr <GLTFPrimitive> (new GLTFPrimitive((*refPrimitive)));
  
              targetMesh->appendPrimitive(targetPrimitive);
              
-@@ -759,9 +759,9 @@
+@@ -759,9 +761,9 @@
                  }
              }
              
@@ -4607,12 +4628,12 @@
              
              indices->setBufferView(targetIndicesView);
              indices->setCount(indicesCount);
-@@ -770,21 +770,21 @@
+@@ -770,21 +772,21 @@
  
              
              // Now for each mesh attribute in the mesh, create another one just for the primitive
 -            shared_ptr <GLTFPrimitive> primitive = static_pointer_cast<GLTFPrimitive>(primitives[i]);
-+            boost::shared_ptr <GLTFPrimitive> primitive = static_pointer_cast<GLTFPrimitive>(primitives[i]);
++            boost::shared_ptr <GLTFPrimitive> primitive = boost::static_pointer_cast<GLTFPrimitive>(primitives[i]);
              VertexAttributeVector vertexAttributes = primitive->getVertexAttributes();
              for (size_t j = 0 ; j < vertexAttributes.size() ; j++) {
                  Semantic semantic = vertexAttributes[j]->getSemantic();
@@ -4633,7 +4654,7 @@
                  targetAttribute->setCount(targetVertexCount);
                  targetAttribute->setBufferView(targetAttributeBufferView);
  
-@@ -811,4 +811,4 @@
+@@ -811,4 +813,4 @@
      }
      */
      
@@ -4786,8 +4807,8 @@
          if (JSONValue::isEqualTo(value) == true)
              return true;
 diff -ur collada2gltf.org/JSON/JSONObject.cpp collada2gltf/JSON/JSONObject.cpp
---- collada2gltf.org/JSON/JSONObject.cpp	2014-09-29 15:30:40.142494472 +0200
-+++ collada2gltf/JSON/JSONObject.cpp	2014-09-29 15:48:14.562534363 +0200
+--- collada2gltf.org/JSON/JSONObject.cpp	2014-05-25 05:30:45.116840000 -0400
++++ collada2gltf/JSON/JSONObject.cpp	2014-10-31 01:56:34.000000000 -0400
 @@ -38,8 +38,8 @@
  namespace GLTF 
  {
@@ -4815,7 +4836,7 @@
                      array->_parseRapidJSONArray(currentValue);
                      this->setValue(key, array);
                  }
-@@ -128,10 +128,10 @@
+@@ -128,30 +128,30 @@
      {
      }
      
@@ -4828,8 +4849,9 @@
 +            outObject = boost::shared_ptr <GLTF::JSONObject> (new GLTF::JSONObject());
              setValue(key, outObject);
          } else {
-             outObject = static_pointer_cast <GLTF::JSONObject> (getValue(key));
-@@ -139,10 +139,10 @@
+-            outObject = static_pointer_cast <GLTF::JSONObject> (getValue(key));
++            outObject = boost::static_pointer_cast <GLTF::JSONObject> (getValue(key));
+         }
          return outObject;
      }
      
@@ -4842,8 +4864,10 @@
 +            outObject = boost::shared_ptr <GLTF::JSONArray> (new GLTF::JSONArray());
              setValue(key, outObject);
          } else {
-             outObject = static_pointer_cast <GLTF::JSONArray> (getValue(key));
-@@ -151,7 +151,7 @@
+-            outObject = static_pointer_cast <GLTF::JSONArray> (getValue(key));
++            outObject = boost::static_pointer_cast <GLTF::JSONArray> (getValue(key));
+         }
+         return outObject;
      }
  
      
@@ -4863,16 +4887,18 @@
      
 -    shared_ptr <JSONObject> JSONObject::getObject(const std::string &key) {
 -        shared_ptr <JSONValue> value = this->_keyToJSONValue[key];
+-        return static_pointer_cast <JSONObject> (value);
 +    boost::shared_ptr <JSONObject> JSONObject::getObject(const std::string &key) {
 +        boost::shared_ptr <JSONValue> value = this->_keyToJSONValue[key];
-         return static_pointer_cast <JSONObject> (value);
++        return boost::static_pointer_cast <JSONObject> (value);
      }
  
 -    shared_ptr <JSONArray> JSONObject::getArray(const std::string &key) {
 -        shared_ptr <JSONValue> value = this->_keyToJSONValue[key];
+-        return static_pointer_cast <JSONArray> (value);
 +    boost::shared_ptr <JSONArray> JSONObject::getArray(const std::string &key) {
 +        boost::shared_ptr <JSONValue> value = this->_keyToJSONValue[key];
-         return static_pointer_cast <JSONArray> (value);
++        return boost::static_pointer_cast <JSONArray> (value);
      }
  
      void JSONObject::setUnsignedInt32(const std::string &key, unsigned int value) {
@@ -4883,7 +4909,7 @@
      unsigned int JSONObject::getUnsignedInt32(const std::string &key) {
          if (this->contains(key)) {
 -            shared_ptr <JSONNumber> number = static_pointer_cast <JSONNumber> (this->getValue(key));
-+            boost::shared_ptr <JSONNumber> number = static_pointer_cast <JSONNumber> (this->getValue(key));
++            boost::shared_ptr <JSONNumber> number = boost::static_pointer_cast <JSONNumber> (this->getValue(key));
              return number->getUnsignedInt32();
          }
          return 0;
@@ -4897,7 +4923,7 @@
      bool JSONObject::getBool(const std::string &key) {
          if (this->contains(key)) {
 -            shared_ptr <JSONNumber> number = static_pointer_cast <JSONNumber> (this->getValue(key));
-+            boost::shared_ptr <JSONNumber> number = static_pointer_cast <JSONNumber> (this->getValue(key));
++            boost::shared_ptr <JSONNumber> number = boost::static_pointer_cast <JSONNumber> (this->getValue(key));
              
              return number->getBool();
          }
@@ -4912,7 +4938,7 @@
      int JSONObject::getInt32(const std::string &key) {
          if (this->contains(key)) {
 -            shared_ptr <JSONNumber> number = static_pointer_cast <JSONNumber> (this->getValue(key));
-+            boost::shared_ptr <JSONNumber> number = static_pointer_cast <JSONNumber> (this->getValue(key));
++            boost::shared_ptr <JSONNumber> number = boost::static_pointer_cast <JSONNumber> (this->getValue(key));
              return number->getInt32();
          }
          return 0;
@@ -4926,7 +4952,7 @@
      double JSONObject::getDouble(const std::string &key) {
          if (this->contains(key)) {
 -            shared_ptr <JSONNumber> number = static_pointer_cast <JSONNumber> (this->getValue(key));
-+            boost::shared_ptr <JSONNumber> number = static_pointer_cast <JSONNumber> (this->getValue(key));
++            boost::shared_ptr <JSONNumber> number = boost::static_pointer_cast <JSONNumber> (this->getValue(key));
              return number->getDouble();
          }
          return 0;
@@ -4940,7 +4966,7 @@
      const std::string JSONObject::getString(const std::string &key) {
          if (this->contains(key)) {
 -            shared_ptr <JSONString> str = static_pointer_cast <JSONString> (this->getValue(key));
-+            boost::shared_ptr <JSONString> str = static_pointer_cast <JSONString> (this->getValue(key));
++            boost::shared_ptr <JSONString> str = boost::static_pointer_cast <JSONString> (this->getValue(key));
              return str->getString();
          }
          return "";
@@ -4994,7 +5020,7 @@
          JSONValueVectorRef allKeys = keysA->values();
          for (size_t i = 0 ; i < allKeys.size() ; i++) {
 -            shared_ptr<JSONString> key = static_pointer_cast<JSONString>(allKeys[i]);
-+            boost::shared_ptr<JSONString> key = static_pointer_cast<JSONString>(allKeys[i]);
++            boost::shared_ptr<JSONString> key = boost::static_pointer_cast<JSONString>(allKeys[i]);
              
 -            shared_ptr<JSONValue> objA = this->getValue(key->getString());
 -            shared_ptr<JSONValue> objB = objectValue->getValue(key->getString());
