This patch removes a long-unused function because a bug in it triggers
an error in the modern compiler (clang-3.8). Instead of fixing the function,
we just remove it.

	-mi

--- libflatfile/Database.h	2003-06-19 19:37:46.000000000 -0400
+++ libflatfile/Database.h	2016-02-18 22:35:32.329328000 -0500
@@ -112,12 +112,4 @@
         virtual FType field(int i) const;
 
-        /**
-         * write the format of the field's argument in format,
-         * and return a strings' vector with name of each argument part.
-         * the format use the same display as used by printf
-         */
-        virtual std::vector<std::string> field_argumentf(int i, std::string& format)
-                 { format = std::string(""); return std::vector<std::string>(0, std::string(""));}
-
 	    /**
 	     * Add a field to the flat-file database. An exception
--- libflatfile/DB.h	2003-06-19 19:37:46.000000000 -0400
+++ libflatfile/DB.h	2016-02-18 22:35:10.046799000 -0500
@@ -72,11 +72,4 @@
 
         /**
-         * write the format of the field's argument in format,
-         * and return a strings' vector with name of each argument part.
-         * the format use the same display as used by printf
-         */
-        virtual std::vector<std::string> field_argumentf(int i, std::string& format);
-
-        /**
          * Return the maximum number of views supported by this
          * type of flat-file database.
--- libflatfile/DB.cpp	2003-06-19 19:37:46.000000000 -0400
+++ libflatfile/DB.cpp	2016-02-18 22:35:55.362853000 -0500
@@ -1291,66 +1293,4 @@
 }
 
-std::vector<std::string> 
-PalmLib::FlatFile::DB::field_argumentf(int i, std::string& format)
-{
-    std::vector<std::string> vtitles(0, std::string(""));
-        int j;
-
-    switch (field_type(i)) {
-    case PalmLib::FlatFile::Field::STRING:
-        format = std::string("%s");
-        vtitles.push_back(std::string("default value"));
-    break;
-    case PalmLib::FlatFile::Field::INTEGER:
-        format = std::string("%ld/%d");
-        vtitles.push_back(std::string("default value"));
-        vtitles.push_back(std::string("increment"));
-    break;
-    case PalmLib::FlatFile::Field::FLOAT:
-        format = std::string("%f");
-        vtitles.push_back(std::string("default value"));
-    break;
-    case PalmLib::FlatFile::Field::DATE:
-        format = std::string("%d/%d/%d");
-        vtitles.push_back(std::string("Year (or now)"));
-        vtitles.push_back(std::string("Month"));
-        vtitles.push_back(std::string("Day in the month"));
-    break;
-    case PalmLib::FlatFile::Field::TIME:
-        format = std::string("%d/%d");
-        vtitles.push_back(std::string("Hour (or now)"));
-        vtitles.push_back(std::string("Minute"));
-    break;
-        case PalmLib::FlatFile::Field::LIST:
-        format = std::string("");
-        for (j = 0; j < 31; i++) {
-            format += std::string("%s/");
-            std::ostringstream  title;
-            title << "item " << j;
-            vtitles.push_back(title.str());
-        }
-        format += std::string("%s");
-        vtitles.push_back(std::string("item 32"));
-    break;
-        case PalmLib::FlatFile::Field::LINK:
-        format = std::string("%s/%d");
-        vtitles.push_back(std::string("database"));
-        vtitles.push_back(std::string("field number"));
-    break;
-        case PalmLib::FlatFile::Field::LINKED:
-        format = std::string("%d/%d");
-        vtitles.push_back(std::string("link field number"));
-        vtitles.push_back(std::string("field number"));
-    break;
-        case PalmLib::FlatFile::Field::CALCULATED:
-    case PalmLib::FlatFile::Field::BOOLEAN:
-        case PalmLib::FlatFile::Field::NOTE:
-    default:
-        format = std::string("");
-    break;
-    }
-    return vtitles;
-}
-
 unsigned PalmLib::FlatFile::DB::getMaxNumOfListViews() const
 {
