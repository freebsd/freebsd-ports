--- ddclient.orig	2015-05-30 21:37:38.000000000 +1200
+++ ddclient	2017-02-08 11:00:23.812579000 +1300
@@ -25,6 +25,7 @@
 use Getopt::Long;
 use Sys::Hostname;
 use IO::Socket;
+use POSIX 'setsid';
 
 # my ($VERSION) = q$Revision: 184 $ =~ /(\d+)/;
 
@@ -35,9 +36,9 @@
 $program  =~ s/d$//;
 my $now       = time;
 my $hostname  = hostname();
-my $etc       = ($program =~ /test/i) ? './'   : '/etc/ddclient/';
-my $cachedir  = ($program =~ /test/i) ? './'   : '/var/cache/ddclient/';
-my $savedir   = ($program =~ /test/i) ? 'URL/' : '/tmp/';
+my $etc       = ($program =~ /test/i) ? './'   : '%%ETCDIR%%/';
+my $cachedir  = ($program =~ /test/i) ? './'   : '/var/tmp/';
+my $savedir   = ($program =~ /test/i) ? 'URL/' : '/var/tmp/';
 my $msgs      = '';
 my $last_msgs = '';
 
@@ -45,7 +46,7 @@
 local $file   = '';
 local $lineno = '';
 
-$ENV{'PATH'} = (exists($ENV{PATH}) ? "$ENV{PATH}:" : "") . "/sbin:/usr/sbin:/bin:/usr/bin:/etc:/usr/lib:";
+$ENV{'PATH'} = (exists($ENV{PATH}) ? "$ENV{PATH}:" : "") . "/sbin:/usr/sbin:/bin:";
 
 sub T_ANY	{'any'};
 sub T_STRING	{'string'};
@@ -743,6 +744,9 @@
     ;
 } elsif (opt('daemon')) {
     $SIG{'CHLD'}   = 'IGNORE';
+    chdir '/';
+    open(STDIN,  "</dev/null");
+    open(STDOUT, ">/dev/null");
     my $pid = fork;
     if ($pid < 0) {
 	print STDERR "${program}: can not fork ($!)\n";
@@ -750,10 +754,9 @@
     } elsif ($pid) {
 	exit 0;
     }
+    setsid;
     $SIG{'CHLD'}   = 'DEFAULT';
-    open(STDOUT, ">/dev/null");
-    open(STDERR, ">/dev/null");
-    open(STDIN,  "</dev/null");
+    open(STDERR, "&STDOUT");
 }
 
 # write out the pid file if we're daemon'ized
@@ -1544,17 +1547,17 @@
     ## execute the command.
     local *FD;
     if (! open(FD, $cmd)) {
-	printf STDERR "$program: cannot execute command %s.\n", $cmd;
+	warning("$program: cannot execute command %s.\n", $cmd);
 
     } elsif ($stdin && (! print FD "$stdin\n")) {
-	printf STDERR "$program: failed writting to %s.\n", $cmd;
+	warning("$program: failed writing to %s.\n", $cmd);
 	close(FD);
 
     } elsif (! close(FD)) {
-	printf STDERR "$program: failed closing %s.($@)\n", $cmd;
+	warning("$program: failed closing %s.($@)\n", $cmd);
 
     } elsif (opt('exec') && $?) {
-	printf STDERR "$program: failed %s. ($@)\n", $cmd;
+	warning("$program: failed %s. ($@)\n", $cmd);
 
     } else {
 	$ok = 1;
@@ -1878,13 +1881,13 @@
 ## load_json_support
 ######################################################################
 sub load_json_support {
-	my $json_loaded = eval {require JSON::Any};
+	my $json_loaded = eval {require JSON::PP};
 	unless ($json_loaded) {
 		fatal(<<"EOM");
-Error loading the Perl module JSON::Any needed for cloudflare update.
+Error loading the Perl module JSON::PP needed for cloudflare update.
 EOM
 	}
-	import JSON::Any;
+	import JSON::PP (qw/decode_json/);
 }
 ######################################################################
 ## geturl
@@ -1957,6 +1960,7 @@
 	    $sd = IO::Socket::SSL->new(
             PeerAddr => $peer,
             PeerPort => $port,
+            SSL_ca_file => '%%LOCALBASE%%/share/certs/ca-root-nss.crt',
             Proto => 'tcp',
             MultiHomed => 1,
             Timeout => opt('timeout'),
@@ -4096,9 +4100,9 @@
 
 			# Strip header
 			$reply =~ s/^.*?\n\n//s;
-			my $response = JSON::Any->jsonToObj($reply);
-			if ($response->{result} eq 'error') {
-				failed ("%s", $response->{msg});
+			my $response = eval {decode_json($reply)};
+			if (!defined $response || !defined $response->{result}) {
+				failed ("invalid json or result.");
 				next; 
 			}
 
@@ -4128,9 +4132,9 @@
 
 			# Strip header
 			$reply =~ s/^.*?\n\n//s;
-			$response = JSON::Any->jsonToObj($reply);
-			if ($response->{result} eq 'error') {
-				failed ("%s", $response->{msg});	
+			$response = eval {decode_json($reply)}; 
+			if (!defined $response || !defined $response->{result}) {
+				failed ("invalid json or result.");
 			} else {
 				success ("%s -- Updated Successfully to %s", $domain, $ip);
 
