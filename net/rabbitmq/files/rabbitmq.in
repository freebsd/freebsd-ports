#!/bin/sh
#
# $FreeBSD$
#
# PROVIDE: rabbitmq
# REQUIRE: DAEMON
# BEFORE: LOGIN
# KEYWORD: shutdown
#
# Add the following line to /etc/rc.conf to enable RabbitMQ
#
#  rabbitmq_enable="YES"

. /etc/rc.subr

name=rabbitmq
rcvar=rabbitmq_enable

load_rc_config $name

# Set some defaults
: ${rabbitmq_enable="NO"}
: ${rabbitmq_user="rabbitmq"}

rabbitmq_server="%%PREFIX%%/sbin/rabbitmq-server"
rabbitmq_ctl="%%PREFIX%%/sbin/rabbitmqctl"
pidfile="/var/run/${name}.pid"

start_cmd="${name}_start"
stop_cmd="${name}_stop"
rotate_logs_cmd="su -m ${rabbitmq_user} -c 'sh -c \"${rabbitmq_ctl} rotate_logs\"'"
status_cmd="su -m ${rabbitmq_user} -c 'sh -c \"${rabbitmq_ctl} status\"'"
extra_commands="rotate_logs status"

export RABBITMQ_HOME=/var/db/${name}

# Prevent conflicts with amqp_client and rabbit_common applications that
# may be installed in ERL_LIBS.
unset ERL_LIBS

rabbitmq_start()
{
	echo "Starting ${name}."

	if [ -d ${RABBITMQ_HOME} ]; then
		chown -R ${rabbitmq_user}:${rabbitmq_user} ${RABBITMQ_HOME}
	fi

	env HOME=${RABBITMQ_HOME} daemon -c -f -u ${rabbitmq_user} -p ${pidfile} ${rabbitmq_server}

	local _attempt=10

	while [ ${_attempt} -gt 0 ]; do
		debug "Running: rabbitmqctl status (${_attempt})"
		$rabbitmq_ctl status > /dev/null 2>&1 && break
		_attempt=$((${_attempt} - 1))
		sleep 1
	done

	if [ ${_attempt} -gt 0 ]; then
		debug "Running: rabbitmqctl wait ${pidfile}"
		$rabbitmq_ctl wait ${pidfile} >/dev/null 2>&1
	fi
}

rabbitmq_stop()
{
	echo "Stopping ${name}."

	debug "Running: ${rabbitmq_ctl} stop"

	su -m ${rabbitmq_user} -c "sh -c \"${rabbitmq_ctl} stop\"" >/dev/null 2>&1

	if [ -f ${pidfile} ]; then
		read rc_pid < ${pidfile}
		wait_for_pids $rc_pid
	fi
}

run_rc_command "$1"
