The first hunk looks for libkipiplugins via CMake, as we split every kipi
plugin as well as the common code into separate ports. Not using CMake results
in "kipiplugins" in a target_link_libraries() call becoming a literal
-lkipiplugins being passed to the linker instead of /path/to/libkipiplugin.so.
--- ./CMakeLists.txt.orig	2015-02-25 22:15:14.659030000 +0100
+++ ./CMakeLists.txt	2015-02-25 22:17:07.071209000 +0100
@@ -391,7 +391,7 @@ if(KIPI_FOUND)
 
         # Plugins which will be always compiled
 
-        add_subdirectory(common)
+        find_library(LIBKIPIPLUGINS_LIBRARIES kipiplugins)
         add_subdirectory(timeadjust)
         add_subdirectory(jpeglossless)
         add_subdirectory(rawconverter)
@@ -468,7 +467,7 @@
         endif()
 
     endif()
-
+    CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/common/libkipiplugins/tools/kpversion.h.cmake.in ${CMAKE_CURRENT_BINARY_DIR}/common/libkipiplugins/kpversion.h)
 else()
 
     message(STATUS "")
