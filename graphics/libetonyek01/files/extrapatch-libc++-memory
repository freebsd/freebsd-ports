--- configure.ac.orig	2017-10-23 08:03:31 UTC
+++ configure.ac
@@ -109,9 +109,11 @@ AC_CHECK_HEADERS(
         boost/fusion/adapted/std_pair.hpp \
         boost/fusion/include/adapt_struct.hpp \
         boost/lexical_cast.hpp \
+        boost/make_shared.hpp \
         boost/none.hpp \
         boost/numeric/conversion/cast.hpp \
         boost/optional.hpp \
+        boost/shared_ptr.hpp \
         boost/spirit/include/phoenix.hpp \
         boost/spirit/include/qi.hpp \
         boost/variant/recursive_variant.hpp \
--- src/conv/csv/numbers2csv.cpp.orig	2017-10-04 07:49:01 UTC
+++ src/conv/csv/numbers2csv.cpp
@@ -11,8 +11,9 @@
 #include "config.h"
 #endif
 
+#include <boost/shared_ptr.hpp>
+
 #include <iostream>
-#include <memory>
 #include <sstream>
 #include <stdio.h>
 #include <string.h>
@@ -73,7 +74,7 @@ int main(int argc, char *argv[]) try
   if (!file)
     return printUsage();
 
-  using std::shared_ptr;
+  using boost::shared_ptr;
   using libetonyek::EtonyekDocument;
 
   shared_ptr<librevenge::RVNGInputStream> input;
--- src/conv/html/pages2html.cpp.orig	2017-10-04 07:49:01 UTC
+++ src/conv/html/pages2html.cpp
@@ -7,10 +7,11 @@
  * file, You can obtain one at http://mozilla.org/MPL/2.0/.
  */
 
-#include <memory>
 #include <stdio.h>
 #include <string.h>
 
+#include <boost/shared_ptr.hpp>
+
 #include <librevenge/librevenge.h>
 #include <librevenge-generators/librevenge-generators.h>
 #include <librevenge-stream/librevenge-stream.h>
@@ -74,7 +75,7 @@ int main(int argc, char *argv[])
   if (!file)
     return printUsage();
 
-  using std::shared_ptr;
+  using boost::shared_ptr;
 
   shared_ptr<librevenge::RVNGInputStream> input;
   if (librevenge::RVNGDirectoryStream::isDirectory(file))
--- src/conv/raw/key2raw.cpp.orig	2017-10-04 07:49:01 UTC
+++ src/conv/raw/key2raw.cpp
@@ -11,10 +11,11 @@
 #include "config.h"
 #endif
 
-#include <memory>
 #include <stdio.h>
 #include <string.h>
 
+#include <boost/shared_ptr.hpp>
+
 #include <librevenge-generators/librevenge-generators.h>
 #include <librevenge-stream/librevenge-stream.h>
 #include <librevenge/librevenge.h>
@@ -78,7 +79,7 @@ int main(int argc, char *argv[]) try
   if (!file)
     return printUsage();
 
-  using std::shared_ptr;
+  using boost::shared_ptr;
   using libetonyek::EtonyekDocument;
 
   shared_ptr<librevenge::RVNGInputStream> input;
--- src/conv/raw/numbers2raw.cpp.orig	2017-10-04 07:49:01 UTC
+++ src/conv/raw/numbers2raw.cpp
@@ -11,10 +11,11 @@
 #include "config.h"
 #endif
 
-#include <memory>
 #include <stdio.h>
 #include <string.h>
 
+#include <boost/shared_ptr.hpp>
+
 #include <librevenge-generators/librevenge-generators.h>
 #include <librevenge-stream/librevenge-stream.h>
 #include <librevenge/librevenge.h>
@@ -78,7 +79,7 @@ int main(int argc, char *argv[]) try
   if (!file)
     return printUsage();
 
-  using std::shared_ptr;
+  using boost::shared_ptr;
   using libetonyek::EtonyekDocument;
 
   shared_ptr<librevenge::RVNGInputStream> input;
--- src/conv/raw/pages2raw.cpp.orig	2017-10-04 07:49:01 UTC
+++ src/conv/raw/pages2raw.cpp
@@ -7,10 +7,11 @@
  * file, You can obtain one at http://mozilla.org/MPL/2.0/.
  */
 
-#include <memory>
 #include <stdio.h>
 #include <string.h>
 
+#include <boost/shared_ptr.hpp>
+
 #include <librevenge/librevenge.h>
 #include <librevenge-generators/librevenge-generators.h>
 #include <librevenge-stream/librevenge-stream.h>
@@ -81,7 +82,7 @@ int main(int argc, char *argv[])
   if (!file)
     return printUsage();
 
-  using std::shared_ptr;
+  using boost::shared_ptr;
 
   shared_ptr<librevenge::RVNGInputStream> input;
   if (librevenge::RVNGDirectoryStream::isDirectory(file))
--- src/conv/svg/key2xhtml.cpp.orig	2017-10-04 07:49:01 UTC
+++ src/conv/svg/key2xhtml.cpp
@@ -11,8 +11,9 @@
 #include "config.h"
 #endif
 
+#include <boost/shared_ptr.hpp>
+
 #include <iostream>
-#include <memory>
 #include <sstream>
 #include <stdio.h>
 #include <string.h>
@@ -73,7 +74,7 @@ int main(int argc, char *argv[]) try
   if (!file)
     return printUsage();
 
-  using std::shared_ptr;
+  using boost::shared_ptr;
   using libetonyek::EtonyekDocument;
 
   shared_ptr<librevenge::RVNGInputStream> input;
--- src/conv/text/key2text.cpp.orig	2017-10-04 07:49:01 UTC
+++ src/conv/text/key2text.cpp
@@ -11,10 +11,11 @@
 #include "config.h"
 #endif
 
-#include <memory>
 #include <stdio.h>
 #include <string.h>
 
+#include <boost/shared_ptr.hpp>
+
 #include <librevenge-generators/librevenge-generators.h>
 #include <librevenge-stream/librevenge-stream.h>
 #include <librevenge/librevenge.h>
@@ -71,7 +72,7 @@ int main(int argc, char *argv[]) try
   if (!file)
     return printUsage();
 
-  using std::shared_ptr;
+  using boost::shared_ptr;
   using libetonyek::EtonyekDocument;
 
   shared_ptr<librevenge::RVNGInputStream> input;
--- src/conv/text/numbers2text.cpp.orig	2017-10-04 07:49:01 UTC
+++ src/conv/text/numbers2text.cpp
@@ -11,10 +11,11 @@
 #include "config.h"
 #endif
 
-#include <memory>
 #include <stdio.h>
 #include <string.h>
 
+#include <boost/shared_ptr.hpp>
+
 #include <librevenge-generators/librevenge-generators.h>
 #include <librevenge-stream/librevenge-stream.h>
 #include <librevenge/librevenge.h>
@@ -71,7 +72,7 @@ int main(int argc, char *argv[]) try
   if (!file)
     return printUsage();
 
-  using std::shared_ptr;
+  using boost::shared_ptr;
   using libetonyek::EtonyekDocument;
 
   shared_ptr<librevenge::RVNGInputStream> input;
--- src/conv/text/pages2text.cpp.orig	2017-10-04 07:49:01 UTC
+++ src/conv/text/pages2text.cpp
@@ -7,10 +7,11 @@
  * file, You can obtain one at http://mozilla.org/MPL/2.0/.
  */
 
-#include <memory>
 #include <stdio.h>
 #include <string.h>
 
+#include <boost/shared_ptr.hpp>
+
 #include <librevenge/librevenge.h>
 #include <librevenge-generators/librevenge-generators.h>
 #include <librevenge-stream/librevenge-stream.h>
@@ -77,7 +78,7 @@ int main(int argc, char *argv[])
   if (!szInputFile)
     return printUsage();
 
-  using std::shared_ptr;
+  using boost::shared_ptr;
 
   shared_ptr<librevenge::RVNGInputStream> input;
   if (librevenge::RVNGDirectoryStream::isDirectory(szInputFile))
--- src/lib/EtonyekDocument.cpp.orig	2017-10-04 07:49:01 UTC
+++ src/lib/EtonyekDocument.cpp
@@ -10,9 +10,9 @@
 #include <libetonyek/libetonyek.h>
 
 #include <cassert>
-#include <memory>
 
 #include <boost/optional.hpp>
+#include <boost/shared_ptr.hpp>
 
 #include <libxml/xmlreader.h>
 
@@ -43,7 +43,7 @@
 #include "PAG5Parser.h"
 
 
-using std::shared_ptr;
+using boost::shared_ptr;
 using std::string;
 
 using librevenge::RVNG_SEEK_SET;
--- src/lib/IWAField.h.orig	2017-10-04 07:49:01 UTC
+++ src/lib/IWAField.h
@@ -11,11 +11,11 @@
 #define IWAFIELD_H_INCLUDED
 
 #include <deque>
-#include <memory>
 #include <stdexcept>
 
 #include <boost/container/deque.hpp>
 #include <boost/optional.hpp>
+#include <boost/shared_ptr.hpp>
 
 #include "IWAReader.h"
 #include "libetonyek_utils.h"
@@ -64,7 +64,7 @@ class IWAField (public)
   virtual void parse(const RVNGInputStreamPtr_t &input, unsigned long length, bool allowEmpty) = 0;
 };
 
-typedef std::shared_ptr<IWAField> IWAFieldPtr_t;
+typedef boost::shared_ptr<IWAField> IWAFieldPtr_t;
 
 namespace detail
 {
--- src/lib/IWAMessage.cpp.orig	2017-05-16 07:53:14 UTC
+++ src/lib/IWAMessage.cpp
@@ -10,8 +10,9 @@
 #include "IWAMessage.h"
 
 #include <cassert>
-#include <memory>
 
+#include <boost/make_shared.hpp>
+
 namespace libetonyek
 {
 
@@ -202,7 +203,7 @@ const FieldT &IWAMessage::getField(const std::size_t f
   }
   else
   {
-    fieldIt->second.m_realField = std::make_shared<FieldT>();
+    fieldIt->second.m_realField = boost::make_shared<FieldT>();
     for (std::deque<InputRange_t>::const_iterator it = fieldIt->second.m_pieces.begin(); it != fieldIt->second.m_pieces.end(); ++it)
     {
       assert(bool(m_input));
--- src/lib/IWAParser.cpp.orig	2017-10-04 07:49:01 UTC
+++ src/lib/IWAParser.cpp
@@ -13,9 +13,9 @@
 #include <cassert>
 #include <functional>
 #include <map>
-#include <memory>
 #include <utility>
 
+#include <boost/make_shared.hpp>
 #include <boost/optional.hpp>
 
 #include "IWAObjectType.h"
@@ -33,17 +33,17 @@
 namespace libetonyek
 {
 
+using boost::make_shared;
 using boost::none;
 using boost::optional;
+using boost::shared_ptr;
 
 using namespace std::placeholders;
 
 using std::bind;
 using std::deque;
 using std::make_pair;
-using std::make_shared;
 using std::map;
-using std::shared_ptr;
 using std::string;
 
 namespace
--- src/lib/IWAParser.h.orig	2017-05-16 07:53:14 UTC
+++ src/lib/IWAParser.h
@@ -13,11 +13,11 @@
 #include <deque>
 #include <functional>
 #include <map>
-#include <memory>
 #include <string>
 #include <unordered_map>
 
 #include <boost/optional.hpp>
+#include <boost/shared_ptr.hpp>
 #include <boost/variant.hpp>
 
 #include <mdds/flat_segment_tree.hpp>
@@ -119,7 +119,7 @@ class IWAParser (protected)
 
 protected:
   IWORKLanguageManager m_langManager;
-  std::shared_ptr<IWORKText> m_currentText;
+  boost::shared_ptr<IWORKText> m_currentText;
 
 private:
   typedef std::map<unsigned, boost::variant<std::string, unsigned> > DataList_t;
@@ -134,9 +134,9 @@ class IWAParser (protected)
 
   struct TableInfo
   {
-    TableInfo(const std::shared_ptr<IWORKTable> &table, unsigned columns, unsigned rows);
+    TableInfo(const boost::shared_ptr<IWORKTable> &table, unsigned columns, unsigned rows);
 
-    std::shared_ptr<IWORKTable> m_table;
+    boost::shared_ptr<IWORKTable> m_table;
 
     const unsigned m_columns;
     const unsigned m_rows;
@@ -204,7 +204,7 @@ class IWAParser (protected)
   mutable StyleMap_t m_listStyles;
 
   IWORKTableNameMapPtr_t m_tableNameMap;
-  std::shared_ptr<TableInfo> m_currentTable;
+  boost::shared_ptr<TableInfo> m_currentTable;
 };
 
 }
--- src/lib/IWAReader.cpp.orig	2017-05-16 07:53:14 UTC
+++ src/lib/IWAReader.cpp
@@ -10,8 +10,9 @@
 #include "IWAReader.h"
 
 #include <cassert>
-#include <memory>
 
+#include <boost/make_shared.hpp>
+
 #include "IWAMessage.h"
 #include "IWORKMemoryStream.h"
 
@@ -82,7 +83,7 @@ const RVNGInputStreamPtr_t Bytes::read(const RVNGInput
   const unsigned char *const bytes = input->read(length, readBytes);
   if (readBytes < length)
     throw ParseError();
-  return std::make_shared<IWORKMemoryStream>(bytes, std::size_t(length));
+  return boost::make_shared<IWORKMemoryStream>(bytes, std::size_t(length));
 }
 
 IWAMessage Message::read(const RVNGInputStreamPtr_t &input, const unsigned long length)
--- src/lib/IWASnappyStream.cpp.orig	2017-10-04 07:49:01 UTC
+++ src/lib/IWASnappyStream.cpp
@@ -11,10 +11,11 @@
 
 #include <cassert>
 #include <limits>
-#include <memory>
 #include <utility>
 #include <vector>
 
+#include <boost/make_shared.hpp>
+
 #include "IWORKMemoryStream.h"
 
 using std::vector;
@@ -155,7 +156,7 @@ RVNGInputStreamPtr_t uncompress(const RVNGInputStreamP
       throw CompressionException();
   }
 
-  return std::make_shared<IWORKMemoryStream>(data);
+  return boost::make_shared<IWORKMemoryStream>(data);
 }
 
 }
@@ -177,7 +178,7 @@ RVNGInputStreamPtr_t IWASnappyStream::uncompressBlock(
 {
   vector<unsigned char> data;
   libetonyek::uncompressBlock(block, getLength(block), data);
-  return std::make_shared<IWORKMemoryStream>(data);
+  return boost::make_shared<IWORKMemoryStream>(data);
 }
 
 bool IWASnappyStream::isStructured()
--- src/lib/IWAText.cpp.orig	2017-10-23 07:42:01 UTC
+++ src/lib/IWAText.cpp
@@ -9,7 +9,7 @@
 
 #include "IWAText.h"
 
-#include <memory>
+#include <boost/make_shared.hpp>
 
 #include "IWORKLanguageManager.h"
 #include "IWORKProperties.h"
@@ -18,9 +18,9 @@
 namespace libetonyek
 {
 
+using boost::make_shared;
 using boost::none;
 
-using std::make_shared;
 using std::map;
 using std::string;
 
--- src/lib/IWORKCollector.cpp.orig	2017-10-04 07:49:01 UTC
+++ src/lib/IWORKCollector.cpp
@@ -14,8 +14,9 @@
 #include <cmath>
 #include <cstring>
 #include <functional>
-#include <memory>
 
+#include <boost/make_shared.hpp>
+
 #include "IWORKDocumentInterface.h"
 #include "IWORKOutputElements.h"
 #include "IWORKPath.h"
@@ -29,6 +30,8 @@
 namespace libetonyek
 {
 
+using boost::make_shared;
+using boost::shared_ptr;
 
 using librevenge::RVNGPropertyList;
 using librevenge::RVNG_PERCENT;
@@ -36,9 +39,7 @@ using librevenge::RVNG_POINT;
 
 using namespace std::placeholders;
 
-using std::make_shared;
 using std::memcmp;
-using std::shared_ptr;
 using std::string;
 
 namespace
@@ -376,7 +377,7 @@ IWORKCollector::~IWORKCollector()
   assert(!m_currentText);
 }
 
-void IWORKCollector::setRecorder(const std::shared_ptr<IWORKRecorder> &recorder)
+void IWORKCollector::setRecorder(const boost::shared_ptr<IWORKRecorder> &recorder)
 {
   m_recorder = recorder;
 }
@@ -611,7 +612,7 @@ void IWORKCollector::collectFooter(const std::string &
   collectHeaderFooter(name, m_footers);
 }
 
-void IWORKCollector::collectTable(const std::shared_ptr<IWORKTable> &table)
+void IWORKCollector::collectTable(const boost::shared_ptr<IWORKTable> &table)
 {
   if (bool(m_recorder))
   {
@@ -625,7 +626,7 @@ void IWORKCollector::collectTable(const std::shared_pt
   m_currentTable.reset();
 }
 
-void IWORKCollector::collectText(const std::shared_ptr<IWORKText> &text)
+void IWORKCollector::collectText(const boost::shared_ptr<IWORKText> &text)
 {
   if (bool(m_recorder))
   {
@@ -677,12 +678,12 @@ void IWORKCollector::endGroup()
   --m_groupLevel;
 }
 
-std::shared_ptr<IWORKTable> IWORKCollector::createTable(const IWORKTableNameMapPtr_t &tableNameMap, const IWORKLanguageManager &langManager) const
+boost::shared_ptr<IWORKTable> IWORKCollector::createTable(const IWORKTableNameMapPtr_t &tableNameMap, const IWORKLanguageManager &langManager) const
 {
   return shared_ptr<IWORKTable>(new IWORKTable(tableNameMap, langManager));
 }
 
-std::shared_ptr<IWORKText> IWORKCollector::createText(const IWORKLanguageManager &langManager, bool discardEmptyContent) const
+boost::shared_ptr<IWORKText> IWORKCollector::createText(const IWORKLanguageManager &langManager, bool discardEmptyContent) const
 {
   return make_shared<IWORKText>(langManager, discardEmptyContent);
 }
--- src/lib/IWORKCollector.h.orig	2017-10-23 07:42:01 UTC
+++ src/lib/IWORKCollector.h
@@ -11,11 +11,11 @@
 #define IWORKCOLLECTOR_H_INCLUDED
 
 #include <deque>
-#include <memory>
 #include <stack>
 #include <string>
 
 #include <boost/optional.hpp>
+#include <boost/shared_ptr.hpp>
 
 #include "libetonyek_utils.h"
 #include "IWORKPath_fwd.h"
@@ -54,7 +54,7 @@ class IWORKCollector (public)
   explicit IWORKCollector(IWORKDocumentInterface *document);
   ~IWORKCollector();
 
-  void setRecorder(const std::shared_ptr<IWORKRecorder> &recorder);
+  void setRecorder(const boost::shared_ptr<IWORKRecorder> &recorder);
 
   // collector functions
 
@@ -86,8 +86,8 @@ class IWORKCollector (public)
   void collectHeader(const std::string &name);
   void collectFooter(const std::string &name);
 
-  void collectTable(const std::shared_ptr<IWORKTable> &table);
-  void collectText(const std::shared_ptr<IWORKText> &text);
+  void collectTable(const boost::shared_ptr<IWORKTable> &table);
+  void collectText(const boost::shared_ptr<IWORKText> &text);
 
   void startDocument();
   void endDocument();
@@ -112,8 +112,8 @@ class IWORKCollector (public)
   IWORKOutputManager &getOutputManager();
 
 public:
-  virtual std::shared_ptr<IWORKTable> createTable(const IWORKTableNameMapPtr_t &tableNameMap, const IWORKLanguageManager &langManager) const;
-  virtual std::shared_ptr<IWORKText> createText(const IWORKLanguageManager &langManager, bool discardEmptyContent = false) const;
+  virtual boost::shared_ptr<IWORKTable> createTable(const IWORKTableNameMapPtr_t &tableNameMap, const IWORKLanguageManager &langManager) const;
+  virtual boost::shared_ptr<IWORKText> createText(const IWORKLanguageManager &langManager, bool discardEmptyContent = false) const;
 
 protected:
   void fillMetadata(librevenge::RVNGPropertyList &props);
@@ -136,7 +136,7 @@ class IWORKCollector (public)
 
 protected:
   IWORKDocumentInterface *m_document;
-  std::shared_ptr<IWORKRecorder> m_recorder;
+  boost::shared_ptr<IWORKRecorder> m_recorder;
 
   std::stack<Level> m_levelStack;
   IWORKStyleStack m_styleStack;
@@ -145,8 +145,8 @@ class IWORKCollector (public)
 
   std::deque<IWORKStylePtr_t> m_newStyles;
 
-  std::shared_ptr<IWORKTable> m_currentTable;
-  std::shared_ptr<IWORKText> m_currentText;
+  boost::shared_ptr<IWORKTable> m_currentTable;
+  boost::shared_ptr<IWORKText> m_currentText;
 
   IWORKHeaderFooterMap_t m_headers;
   IWORKHeaderFooterMap_t m_footers;
--- src/lib/IWORKDiscardContext.h.orig	2017-10-04 07:49:01 UTC
+++ src/lib/IWORKDiscardContext.h
@@ -10,7 +10,8 @@
 #ifndef IWORKDISCARDCONTEXT_H_INCLUDED
 #define IWORKDISCARDCONTEXT_H_INCLUDED
 
-#include <memory>
+#include <boost/enable_shared_from_this.hpp>
+#include <boost/shared_ptr.hpp>
 
 #include "IWORKXMLContext.h"
 
@@ -19,7 +20,7 @@ namespace libetonyek
 
 class IWORKXMLParserState;
 
-class IWORKDiscardContext : public IWORKXMLContext, public std::enable_shared_from_this<IWORKDiscardContext>
+class IWORKDiscardContext : public IWORKXMLContext, public boost::enable_shared_from_this<IWORKDiscardContext>
 {
   struct Data;
 
@@ -37,7 +38,7 @@ class IWORKDiscardContext : public IWORKXMLContext, pu
   IWORKXMLParserState &m_state;
   unsigned m_level;
   bool m_enableCollector;
-  std::shared_ptr<Data> m_data;
+  boost::shared_ptr<Data> m_data;
 };
 
 }
--- src/lib/IWORKFormula.h.orig	2017-05-16 07:53:14 UTC
+++ src/lib/IWORKFormula.h
@@ -10,9 +10,10 @@
 #ifndef IWORKFORMULA_H_INCLUDED
 #define IWORKFORMULA_H_INCLUDED
 
-#include <memory>
 #include <string>
 
+#include <boost/shared_ptr.hpp>
+
 #include "IWORKTypes_fwd.h"
 #include "libetonyek_utils.h"
 
@@ -33,7 +34,7 @@ class IWORKFormula (public)
   void write(librevenge::RVNGPropertyListVector &formula, const IWORKTableNameMapPtr_t &tableNameMap) const;
 
 private:
-  std::shared_ptr<Impl> m_impl;
+  boost::shared_ptr<Impl> m_impl;
 };
 
 } // namespace libetonyek
--- src/lib/IWORKLanguageManager.cpp.orig	2017-10-04 07:49:01 UTC
+++ src/lib/IWORKLanguageManager.cpp
@@ -25,9 +25,10 @@
 namespace libetonyek
 {
 
+using boost::shared_ptr;
+
 using librevenge::RVNGPropertyList;
 
-using std::shared_ptr;
 using std::string;
 using std::unordered_map;
 using std::unordered_set;
--- src/lib/IWORKLanguageManager.h.orig	2017-05-16 07:53:14 UTC
+++ src/lib/IWORKLanguageManager.h
@@ -10,11 +10,12 @@
 #ifndef IWORKLANGUAGEMANAGER_H_INCLUDED
 #define IWORKLANGUAGEMANAGER_H_INCLUDED
 
-#include <memory>
 #include <string>
 #include <unordered_map>
 #include <unordered_set>
 
+#include <boost/shared_ptr.hpp>
+
 #include <librevenge/librevenge.h>
 
 namespace libetonyek
@@ -48,7 +49,7 @@ class IWORKLanguageManager (private)
   std::unordered_map<std::string, std::string> m_localeMap;
   std::unordered_set<std::string> m_invalidLocales;
   std::unordered_map<std::string, librevenge::RVNGPropertyList> m_propsMap;
-  mutable std::shared_ptr<LangDB> m_langDB;
+  mutable boost::shared_ptr<LangDB> m_langDB;
 };
 
 }
--- src/lib/IWORKMemoryStream.cpp.orig	2017-10-04 07:49:01 UTC
+++ src/lib/IWORKMemoryStream.cpp
@@ -18,7 +18,7 @@ namespace libetonyek
 {
 
 IWORKMemoryStream::IWORKMemoryStream(const RVNGInputStreamPtr_t &input)
-  : m_data()
+  : m_data(0)
   , m_length(0)
   , m_pos(0)
 {
@@ -35,7 +35,7 @@ IWORKMemoryStream::IWORKMemoryStream(const RVNGInputSt
 }
 
 IWORKMemoryStream::IWORKMemoryStream(const RVNGInputStreamPtr_t &input, const unsigned length)
-  : m_data()
+  : m_data(0)
   , m_length(0)
   , m_pos(0)
 {
@@ -43,7 +43,7 @@ IWORKMemoryStream::IWORKMemoryStream(const RVNGInputSt
 }
 
 IWORKMemoryStream::IWORKMemoryStream(const std::vector<unsigned char> &data)
-  : m_data()
+  : m_data(0)
   , m_length(data.size())
   , m_pos(0)
 {
@@ -66,6 +66,7 @@ IWORKMemoryStream::IWORKMemoryStream(const unsigned ch
 
 IWORKMemoryStream::~IWORKMemoryStream()
 {
+  delete[] m_data;
 }
 
 bool IWORKMemoryStream::isStructured()
@@ -107,7 +108,7 @@ const unsigned char *IWORKMemoryStream::read(unsigned 
   m_pos += numBytes;
 
   numBytesRead = numBytes;
-  return m_data.get() + oldPos;
+  return m_data + oldPos;
 }
 catch (...)
 {
@@ -157,8 +158,9 @@ void IWORKMemoryStream::assign(const unsigned char *co
 {
   assert(0 != length);
 
-  m_data.reset(new unsigned char[length]);
-  std::copy(data, data + length, m_data.get());
+  unsigned char *buffer = new unsigned char[length];
+  std::copy(data, data + length, buffer);
+  m_data = buffer;
 }
 
 void IWORKMemoryStream::read(const RVNGInputStreamPtr_t &input, const unsigned length)
--- src/lib/IWORKMemoryStream.h.orig	2017-10-04 07:49:01 UTC
+++ src/lib/IWORKMemoryStream.h
@@ -10,7 +10,6 @@
 #ifndef IWORKMEMORYSTREAM_H_INCLUDED
 #define IWORKMEMORYSTREAM_H_INCLUDED
 
-#include <memory>
 #include <vector>
 
 #include "libetonyek_utils.h"
@@ -51,7 +50,7 @@ class IWORKMemoryStream : public librevenge::RVNGInput
   void read(const RVNGInputStreamPtr_t &input, unsigned length);
 
 private:
-  std::unique_ptr<unsigned char[]> m_data;
+  const unsigned char *m_data;
   long m_length;
   long m_pos;
 };
--- src/lib/IWORKOutputElements.cpp.orig	2017-10-04 07:49:01 UTC
+++ src/lib/IWORKOutputElements.cpp
@@ -9,7 +9,7 @@
 
 #include "IWORKOutputElements.h"
 
-#include <memory>
+#include <boost/make_shared.hpp>
 
 #include "IWORKDocumentInterface.h"
 #include "IWORKFormula.h"
@@ -17,7 +17,7 @@
 namespace libetonyek
 {
 
-using std::make_shared;
+using boost::make_shared;
 
 class IWORKOutputElement
 {
@@ -992,7 +992,7 @@ void IWORKOutputElements::addOpenEndnote(const libreve
 
 void IWORKOutputElements::addOpenFormulaCell(const librevenge::RVNGPropertyList &propList, const IWORKFormula &formula, const IWORKTableNameMapPtr_t &tableNameMap)
 {
-  m_elements.push_back(std::shared_ptr<OpenFormulaCellElement>(new OpenFormulaCellElement(propList, formula, tableNameMap)));
+  m_elements.push_back(boost::shared_ptr<OpenFormulaCellElement>(new OpenFormulaCellElement(propList, formula, tableNameMap)));
 }
 
 void IWORKOutputElements::addOpenFooter(const librevenge::RVNGPropertyList &propList)
--- src/lib/IWORKOutputElements.h.orig	2017-05-16 07:53:14 UTC
+++ src/lib/IWORKOutputElements.h
@@ -11,9 +11,10 @@
 #define IWORKOUTPUTELEMENTS_H_INCLUDED
 
 #include <deque>
-#include <memory>
 #include <unordered_map>
 
+#include <boost/shared_ptr.hpp>
+
 #include <librevenge/librevenge.h>
 
 #include "IWORKTypes_fwd.h"
@@ -28,7 +29,7 @@ class IWORKOutputElement;
 
 class IWORKOutputElements
 {
-  typedef std::deque<std::shared_ptr<IWORKOutputElement> > ElementList_t;
+  typedef std::deque<boost::shared_ptr<IWORKOutputElement> > ElementList_t;
 
 public:
   IWORKOutputElements();
--- src/lib/IWORKParser.cpp.orig	2017-10-04 07:49:01 UTC
+++ src/lib/IWORKParser.cpp
@@ -10,8 +10,9 @@
 #include "IWORKParser.h"
 
 #include <cassert>
-#include <memory>
 
+#include <boost/shared_ptr.hpp>
+
 #include <libxml/xmlreader.h>
 
 #include <stack>
@@ -21,7 +22,7 @@
 #include "IWORKXMLContextBase.h"
 #include "IWORKXMLParserState.h"
 
-using std::shared_ptr;
+using boost::shared_ptr;
 using std::stack;
 
 namespace libetonyek
--- src/lib/IWORKPath.h.orig	2017-05-16 07:53:14 UTC
+++ src/lib/IWORKPath.h
@@ -63,7 +63,7 @@ class IWORKPath (public)
   void write(librevenge::RVNGPropertyListVector &vec) const;
 
 private:
-  std::shared_ptr<Impl> m_impl;
+  boost::shared_ptr<Impl> m_impl;
 };
 
 bool approxEqual(const IWORKPath &left, const IWORKPath &right, double eps = ETONYEK_EPSILON);
--- src/lib/IWORKPath_fwd.h.orig	2017-05-16 07:53:14 UTC
+++ src/lib/IWORKPath_fwd.h
@@ -9,9 +9,10 @@
 #ifndef IWORKPATH_FWD_H_INCLUDED
 #define IWORKPATH_FWD_H_INCLUDED
 
-#include <memory>
 #include <unordered_map>
 
+#include <boost/shared_ptr.hpp>
+
 #include "IWORKTypes_fwd.h"
 
 namespace libetonyek
@@ -19,7 +20,7 @@ namespace libetonyek
 
 class IWORKPath;
 
-typedef std::shared_ptr<IWORKPath> IWORKPathPtr_t;
+typedef boost::shared_ptr<IWORKPath> IWORKPathPtr_t;
 typedef std::unordered_map<ID_t, IWORKPathPtr_t> IWORKPathMap_t;
 
 }
--- src/lib/IWORKRecorder.cpp.orig	2017-05-16 07:53:14 UTC
+++ src/lib/IWORKRecorder.cpp
@@ -21,7 +21,7 @@
 namespace libetonyek
 {
 
-using std::shared_ptr;
+using boost::shared_ptr;
 
 namespace
 {
@@ -112,22 +112,22 @@ struct CollectStylesheet
 
 struct CollectTable
 {
-  CollectTable(const std::shared_ptr<IWORKTable> &table)
+  CollectTable(const boost::shared_ptr<IWORKTable> &table)
     : m_table(table)
   {
   }
 
-  const std::shared_ptr<IWORKTable> m_table;
+  const boost::shared_ptr<IWORKTable> m_table;
 };
 
 struct CollectText
 {
-  CollectText(const std::shared_ptr<IWORKText> &text)
+  CollectText(const boost::shared_ptr<IWORKText> &text)
     : m_text(text)
   {
   }
 
-  const std::shared_ptr<IWORKText> m_text;
+  const boost::shared_ptr<IWORKText> m_text;
 };
 
 struct StartGroup
@@ -361,12 +361,12 @@ void IWORKRecorder::collectStylesheet(const IWORKStyle
   m_impl->m_elements.push_back(CollectStylesheet(stylesheet));
 }
 
-void IWORKRecorder::collectTable(const std::shared_ptr<IWORKTable> &table)
+void IWORKRecorder::collectTable(const boost::shared_ptr<IWORKTable> &table)
 {
   m_impl->m_elements.push_back(CollectTable(table));
 }
 
-void IWORKRecorder::collectText(const std::shared_ptr<IWORKText> &text)
+void IWORKRecorder::collectText(const boost::shared_ptr<IWORKText> &text)
 {
   m_impl->m_elements.push_back(CollectText(text));
 }
--- src/lib/IWORKRecorder.h.orig	2017-05-16 07:53:14 UTC
+++ src/lib/IWORKRecorder.h
@@ -10,10 +10,10 @@
 #ifndef IWORKRECORDER_H_INCLUDED
 #define IWORKRECORDER_H_INCLUDED
 
-#include <memory>
 #include <string>
 
 #include <boost/optional.hpp>
+#include <boost/shared_ptr.hpp>
 
 #include "IWORKPath_fwd.h"
 #include "IWORKStyle.h"
@@ -52,8 +52,8 @@ class IWORKRecorder (public)
 
   void collectStylesheet(const IWORKStylesheetPtr_t &stylesheet);
 
-  void collectTable(const std::shared_ptr<IWORKTable> &table);
-  void collectText(const std::shared_ptr<IWORKText> &text);
+  void collectTable(const boost::shared_ptr<IWORKTable> &table);
+  void collectText(const boost::shared_ptr<IWORKText> &text);
 
   void startGroup();
   void endGroup();
@@ -68,7 +68,7 @@ class IWORKRecorder (public)
   struct Impl;
 
 private:
-  std::shared_ptr<Impl> m_impl;
+  boost::shared_ptr<Impl> m_impl;
 };
 
 } // namespace libetonyek
--- src/lib/IWORKShape.h.orig	2017-05-16 07:53:14 UTC
+++ src/lib/IWORKShape.h
@@ -10,7 +10,7 @@
 #ifndef IWORKSHAPE_H_INCLUDED
 #define IWORKSHAPE_H_INCLUDED
 
-#include <memory>
+#include <boost/shared_ptr.hpp>
 
 #include "IWORKPath_fwd.h"
 #include "IWORKStyle.h"
@@ -33,7 +33,7 @@ struct IWORKShape
   IWORKShape();
 };
 
-typedef std::shared_ptr<IWORKShape> IWORKShapePtr_t;
+typedef boost::shared_ptr<IWORKShape> IWORKShapePtr_t;
 
 /** Path creator functions for stock shapes.
  */
--- src/lib/IWORKStyle_fwd.h.orig	2017-05-16 07:53:14 UTC
+++ src/lib/IWORKStyle_fwd.h
@@ -10,9 +10,10 @@
 #ifndef IWORKSTYLE_FWD_H_INCLUDED
 #define IWORKSTYLE_FWD_H_INCLUDED
 
-#include <memory>
 #include <unordered_map>
 
+#include <boost/shared_ptr.hpp>
+
 #include "IWORKTypes_fwd.h"
 
 namespace libetonyek
@@ -20,7 +21,7 @@ namespace libetonyek
 
 class IWORKStyle;
 
-typedef std::shared_ptr<IWORKStyle> IWORKStylePtr_t;
+typedef boost::shared_ptr<IWORKStyle> IWORKStylePtr_t;
 typedef std::unordered_map<ID_t, IWORKStylePtr_t> IWORKStyleMap_t;
 
 }
--- src/lib/IWORKStylesheet.h.orig	2017-10-23 07:42:01 UTC
+++ src/lib/IWORKStylesheet.h
@@ -17,7 +17,7 @@ namespace libetonyek
 {
 
 struct IWORKStylesheet;
-typedef std::shared_ptr<IWORKStylesheet> IWORKStylesheetPtr_t;
+typedef boost::shared_ptr<IWORKStylesheet> IWORKStylesheetPtr_t;
 typedef std::unordered_map<ID_t, IWORKStylesheetPtr_t> IWORKStylesheetMap_t;
 
 /** Representation of a stylesheet.
--- src/lib/IWORKTable.cpp.orig	2017-05-16 07:53:14 UTC
+++ src/lib/IWORKTable.cpp
@@ -295,12 +295,12 @@ IWORKTable::IWORKTable(const IWORKTableNameMapPtr_t &t
 {
 }
 
-void IWORKTable::setRecorder(const std::shared_ptr<IWORKTableRecorder> &recorder)
+void IWORKTable::setRecorder(const boost::shared_ptr<IWORKTableRecorder> &recorder)
 {
   m_recorder = recorder;
 }
 
-const std::shared_ptr<IWORKTableRecorder> &IWORKTable::getRecorder() const
+const boost::shared_ptr<IWORKTableRecorder> &IWORKTable::getRecorder() const
 {
   return m_recorder;
 }
@@ -391,7 +391,7 @@ void IWORKTable::setBorders(const IWORKGridLineMap_t &
   m_horizontalLines = horizontalLines;
 }
 
-void IWORKTable::insertCell(const unsigned column, const unsigned row, const boost::optional<std::string> &value, const std::shared_ptr<IWORKText> &text, const unsigned columnSpan, const unsigned rowSpan, const boost::optional<IWORKFormula> &formula, const IWORKStylePtr_t &style, const IWORKCellType type)
+void IWORKTable::insertCell(const unsigned column, const unsigned row, const boost::optional<std::string> &value, const boost::shared_ptr<IWORKText> &text, const unsigned columnSpan, const unsigned rowSpan, const boost::optional<IWORKFormula> &formula, const IWORKStylePtr_t &style, const IWORKCellType type)
 {
   if (bool(m_recorder))
   {
--- src/lib/IWORKTable.h.orig	2017-05-16 07:53:14 UTC
+++ src/lib/IWORKTable.h
@@ -10,11 +10,11 @@
 #ifndef IWORKTABLE_H_INCLUDED
 #define IWORKTABLE_H_INCLUDED
 
-#include <deque>
-#include <memory>
-
 #include <boost/optional.hpp>
+#include <boost/shared_ptr.hpp>
 
+#include <deque>
+
 #include "IWORKStyle_fwd.h"
 #include "IWORKTypes.h"
 #include "IWORKOutputElements.h"
@@ -58,8 +58,8 @@ class IWORKTable (public)
 public:
   explicit IWORKTable(const IWORKTableNameMapPtr_t &tableNameMap, const IWORKLanguageManager &langManager);
 
-  void setRecorder(const std::shared_ptr<IWORKTableRecorder> &recorder);
-  const std::shared_ptr<IWORKTableRecorder> &getRecorder() const;
+  void setRecorder(const boost::shared_ptr<IWORKTableRecorder> &recorder);
+  const boost::shared_ptr<IWORKTableRecorder> &getRecorder() const;
 
   void setSize(unsigned columns, unsigned rows);
   void setHeaders(unsigned headerColumns, unsigned headerRows, unsigned footerRows);
@@ -71,7 +71,7 @@ class IWORKTable (public)
   void setBorders(const IWORKGridLineMap_t &verticalLines, const IWORKGridLineMap_t &horizontalLines);
   void insertCell(unsigned column, unsigned row,
                   const boost::optional<std::string> &value = boost::none,
-                  const std::shared_ptr<IWORKText> &text = std::shared_ptr<IWORKText>(),
+                  const boost::shared_ptr<IWORKText> &text = boost::shared_ptr<IWORKText>(),
                   unsigned columnSpan = 1, unsigned rowSpan = 1,
                   const boost::optional<IWORKFormula> &formula = boost::none,
                   const IWORKStylePtr_t &style = IWORKStylePtr_t(),
@@ -115,7 +115,7 @@ class IWORKTable (public)
   IWORKStylePtr_t m_defaultLayoutStyles[5];
   IWORKStylePtr_t m_defaultParaStyles[5];
 
-  std::shared_ptr<IWORKTableRecorder> m_recorder;
+  boost::shared_ptr<IWORKTableRecorder> m_recorder;
 };
 
 }
--- src/lib/IWORKTableRecorder.cpp.orig	2017-05-16 07:53:14 UTC
+++ src/lib/IWORKTableRecorder.cpp
@@ -19,7 +19,7 @@
 namespace libetonyek
 {
 
-using std::shared_ptr;
+using boost::shared_ptr;
 
 namespace
 {
@@ -108,7 +108,7 @@ struct SetBorders
 
 struct InsertCell
 {
-  InsertCell(const unsigned column, const unsigned row, const boost::optional<std::string> &value, const std::shared_ptr<IWORKText> &content, const unsigned columnSpan, const unsigned rowSpan, const boost::optional<IWORKFormula> &formula, const IWORKStylePtr_t &style, IWORKCellType type)
+  InsertCell(const unsigned column, const unsigned row, const boost::optional<std::string> &value, const boost::shared_ptr<IWORKText> &content, const unsigned columnSpan, const unsigned rowSpan, const boost::optional<IWORKFormula> &formula, const IWORKStylePtr_t &style, IWORKCellType type)
     : m_column(column)
     , m_row(row)
     , m_value(value)
@@ -124,7 +124,7 @@ struct InsertCell
   const unsigned m_column;
   const unsigned m_row;
   const boost::optional<std::string> m_value;
-  const std::shared_ptr<IWORKText> m_content;
+  const boost::shared_ptr<IWORKText> m_content;
   const unsigned m_columnSpan;
   const unsigned m_rowSpan;
   const boost::optional<IWORKFormula> m_formula;
@@ -337,7 +337,7 @@ void IWORKTableRecorder::setBorders(const IWORKGridLin
   m_impl->m_elements.push_back(SetBorders(verticalLines, horizontalLines));
 }
 
-void IWORKTableRecorder::insertCell(const unsigned column, const unsigned row, const boost::optional<std::string> &value, const std::shared_ptr<IWORKText> &content, const unsigned columnSpan, const unsigned rowSpan, const boost::optional<IWORKFormula> &formula, const IWORKStylePtr_t &style, const IWORKCellType type)
+void IWORKTableRecorder::insertCell(const unsigned column, const unsigned row, const boost::optional<std::string> &value, const boost::shared_ptr<IWORKText> &content, const unsigned columnSpan, const unsigned rowSpan, const boost::optional<IWORKFormula> &formula, const IWORKStylePtr_t &style, const IWORKCellType type)
 {
   m_impl->m_elements.push_back(InsertCell(column, row, value, content, columnSpan, rowSpan, formula, style, type));
 }
--- src/lib/IWORKTableRecorder.h.orig	2017-05-16 07:53:14 UTC
+++ src/lib/IWORKTableRecorder.h
@@ -10,9 +10,8 @@
 #ifndef IWORKTABLERECORDER_H_INCLUDED
 #define IWORKTABLERECORDER_H_INCLUDED
 
-#include <memory>
-
 #include <boost/optional.hpp>
+#include <boost/shared_ptr.hpp>
 
 #include "IWORKStyle_fwd.h"
 #include "IWORKTable.h"
@@ -38,7 +37,7 @@ class IWORKTableRecorder (public)
   void setStyle(const IWORKStylePtr_t &style);
   void setSizes(const IWORKColumnSizes_t &columnSizes, const IWORKRowSizes_t &rowSizes);
   void setBorders(const IWORKGridLineMap_t &verticalLines, const IWORKGridLineMap_t &horizontalLines);
-  void insertCell(unsigned column, unsigned row, const boost::optional<std::string> &value, const std::shared_ptr<IWORKText> &content, unsigned columnSpan, unsigned rowSpan, const boost::optional<IWORKFormula> &formula, const IWORKStylePtr_t &style, IWORKCellType type);
+  void insertCell(unsigned column, unsigned row, const boost::optional<std::string> &value, const boost::shared_ptr<IWORKText> &content, unsigned columnSpan, unsigned rowSpan, const boost::optional<IWORKFormula> &formula, const IWORKStylePtr_t &style, IWORKCellType type);
   void insertCoveredCell(unsigned column, unsigned row);
 
   void setDefaultCellStyle(IWORKTable::CellType type, const IWORKStylePtr_t &style);
@@ -49,7 +48,7 @@ class IWORKTableRecorder (public)
   struct Impl;
 
 private:
-  std::shared_ptr<Impl> m_impl;
+  boost::shared_ptr<Impl> m_impl;
 };
 
 }
--- src/lib/IWORKText.cpp.orig	2017-10-23 07:42:01 UTC
+++ src/lib/IWORKText.cpp
@@ -10,10 +10,10 @@
 #include "IWORKText.h"
 
 #include <cassert>
-#include <memory>
 #include <string>
 #include <vector>
 
+#include <boost/make_shared.hpp>
 #include <boost/optional.hpp>
 #include <boost/variant.hpp>
 
@@ -474,12 +474,12 @@ IWORKText::~IWORKText()
   assert(m_isOrderedStack.empty());
 }
 
-void IWORKText::setRecorder(const std::shared_ptr<IWORKTextRecorder> &recorder)
+void IWORKText::setRecorder(const boost::shared_ptr<IWORKTextRecorder> &recorder)
 {
   m_recorder = recorder;
 }
 
-const std::shared_ptr<IWORKTextRecorder> &IWORKText::getRecorder() const
+const boost::shared_ptr<IWORKTextRecorder> &IWORKText::getRecorder() const
 {
   return m_recorder;
 }
--- src/lib/IWORKText.h.orig	2017-10-23 07:42:01 UTC
+++ src/lib/IWORKText.h
@@ -35,8 +35,8 @@ class IWORKText (public)
   IWORKText(const IWORKLanguageManager &langManager, bool discardEmptyContent);
   ~IWORKText();
 
-  void setRecorder(const std::shared_ptr<IWORKTextRecorder> &recorder);
-  const std::shared_ptr<IWORKTextRecorder> &getRecorder() const;
+  void setRecorder(const boost::shared_ptr<IWORKTextRecorder> &recorder);
+  const boost::shared_ptr<IWORKTextRecorder> &getRecorder() const;
 
   /// Set style used as base for all layout styles in this text.
   void pushBaseLayoutStyle(const IWORKStylePtr_t &style);
@@ -131,7 +131,7 @@ class IWORKText (public)
 
   IWORKStylePtr_t m_oldSpanStyle;
 
-  std::shared_ptr<IWORKTextRecorder> m_recorder;
+  boost::shared_ptr<IWORKTextRecorder> m_recorder;
 };
 
 }
--- src/lib/IWORKTextRecorder.h.orig	2017-10-23 07:42:01 UTC
+++ src/lib/IWORKTextRecorder.h
@@ -10,9 +10,10 @@
 #ifndef IWORKTEXTRECORDER_H_INCLUDED
 #define IWORKTEXTRECORDER_H_INCLUDED
 
-#include <memory>
 #include <string>
 
+#include <boost/shared_ptr.hpp>
+
 #include "IWORKStyle_fwd.h"
 
 namespace libetonyek
@@ -57,7 +58,7 @@ class IWORKTextRecorder (private)
   struct Impl;
 
 private:
-  std::shared_ptr<Impl> m_impl;
+  boost::shared_ptr<Impl> m_impl;
 };
 
 }
--- src/lib/IWORKText_fwd.h.orig	2017-05-16 07:53:14 UTC
+++ src/lib/IWORKText_fwd.h
@@ -10,14 +10,14 @@
 #ifndef IWORKTEXT_FWD_H_INCLUDED
 #define IWORKTEXT_FWD_H_INCLUDED
 
-#include <memory>
+#include <boost/shared_ptr.hpp>
 
 namespace libetonyek
 {
 
 class IWORKText;
 
-typedef std::shared_ptr<IWORKText> IWORKTextPtr_t;
+typedef boost::shared_ptr<IWORKText> IWORKTextPtr_t;
 
 }
 
--- src/lib/IWORKToken.cpp.orig	2017-10-04 07:49:01 UTC
+++ src/lib/IWORKToken.cpp
@@ -11,7 +11,8 @@
 
 #include <cassert>
 #include <cstring>
-#include <memory>
+
+#include <boost/make_shared.hpp>
 
 #include "IWORKTokenizerBase.h"
 
--- src/lib/IWORKTypes_fwd.h.orig	2017-05-16 07:53:14 UTC
+++ src/lib/IWORKTypes_fwd.h
@@ -10,10 +10,11 @@
 #define IWORKTYPES_FWD_H_INCLUDED
 
 #include <deque>
-#include <memory>
 #include <string>
 #include <unordered_map>
 
+#include <boost/shared_ptr.hpp>
+
 namespace libetonyek
 {
 
@@ -29,7 +30,7 @@ typedef std::unordered_map<ID_t, IWORKOutputID_t> IWOR
 
 typedef std::unordered_map<std::string, std::string> IWORKTableNameMap_t;
 
-typedef std::shared_ptr<IWORKTableNameMap_t> IWORKTableNameMapPtr_t;
+typedef boost::shared_ptr<IWORKTableNameMap_t> IWORKTableNameMapPtr_t;
 
 typedef std::unordered_map<std::string, std::string> IWORKContentMap_t;
 
@@ -38,42 +39,42 @@ struct IWORKPosition;
 
 struct IWORKGeometry;
 
-typedef std::shared_ptr<IWORKGeometry> IWORKGeometryPtr_t;
+typedef boost::shared_ptr<IWORKGeometry> IWORKGeometryPtr_t;
 
 struct IWORKLine;
 
-typedef std::shared_ptr<IWORKLine> IWORKLinePtr_t;
+typedef boost::shared_ptr<IWORKLine> IWORKLinePtr_t;
 
 struct IWORKData;
 
-typedef std::shared_ptr<IWORKData> IWORKDataPtr_t;
+typedef boost::shared_ptr<IWORKData> IWORKDataPtr_t;
 typedef std::unordered_map<ID_t, IWORKDataPtr_t> IWORKDataMap_t;
 
 struct IWORKMediaContent;
 
-typedef std::shared_ptr<IWORKMediaContent> IWORKMediaContentPtr_t;
+typedef boost::shared_ptr<IWORKMediaContent> IWORKMediaContentPtr_t;
 typedef std::unordered_map<ID_t, IWORKMediaContentPtr_t> IWORKMediaContentMap_t;
 
 struct IWORKImage;
 
-typedef std::shared_ptr<IWORKImage> IWORKImagePtr_t;
+typedef boost::shared_ptr<IWORKImage> IWORKImagePtr_t;
 typedef std::unordered_map<ID_t, IWORKImagePtr_t> IWORKImageMap_t;
 
 struct IWORKMedia;
 
-typedef std::shared_ptr<IWORKMedia> IWORKMediaPtr_t;
+typedef boost::shared_ptr<IWORKMedia> IWORKMediaPtr_t;
 
 struct IWORKWrap;
 
-typedef std::shared_ptr<IWORKWrap> IWORKWrapPtr_t;
+typedef boost::shared_ptr<IWORKWrap> IWORKWrapPtr_t;
 
 struct IWORKGroup;
 
-typedef std::shared_ptr<IWORKGroup> IWORKGroupPtr_t;
+typedef boost::shared_ptr<IWORKGroup> IWORKGroupPtr_t;
 
 struct IWORKTableData;
 
-typedef std::shared_ptr<IWORKTableData> IWORKTableDataPtr_t;
+typedef boost::shared_ptr<IWORKTableData> IWORKTableDataPtr_t;
 
 }
 
--- src/lib/IWORKXMLContext.h.orig	2017-05-16 07:53:14 UTC
+++ src/lib/IWORKXMLContext.h
@@ -10,14 +10,14 @@
 #ifndef IWORKXMLCONTEXT_H_INCLUDED
 #define IWORKXMLCONTEXT_H_INCLUDED
 
-#include <memory>
+#include <boost/shared_ptr.hpp>
 
 namespace libetonyek
 {
 
 class IWORKXMLContext;
 
-typedef std::shared_ptr<IWORKXMLContext> IWORKXMLContextPtr_t;
+typedef boost::shared_ptr<IWORKXMLContext> IWORKXMLContextPtr_t;
 
 class IWORKXMLContext
 {
--- src/lib/IWORKXMLParserState.cpp.orig	2017-05-16 07:53:14 UTC
+++ src/lib/IWORKXMLParserState.cpp
@@ -9,7 +9,7 @@
 
 #include "IWORKXMLParserState.h"
 
-#include <memory>
+#include <boost/make_shared.hpp>
 
 #include "IWORKCollector.h"
 #include "IWORKDictionary.h"
@@ -25,7 +25,7 @@ IWORKXMLParserState::IWORKXMLParserState(IWORKParser &
   : m_tableData()
   , m_stylesheet()
   , m_enableCollector(true)
-  , m_tableNameMap(std::make_shared<IWORKTableNameMap_t>())
+  , m_tableNameMap(boost::make_shared<IWORKTableNameMap_t>())
   , m_currentTable()
   , m_currentText()
   , m_parser(parser)
--- src/lib/IWORKXMLParserState.h.orig	2017-05-16 07:53:14 UTC
+++ src/lib/IWORKXMLParserState.h
@@ -10,7 +10,7 @@
 #ifndef IWORKXMLPARSERSTATE_H_INCLUDED
 #define IWORKXMLPARSERSTATE_H_INCLUDED
 
-#include <memory>
+#include <boost/shared_ptr.hpp>
 
 #include "IWORKStylesheet.h"
 #include "IWORKLanguageManager.h"
@@ -49,8 +49,8 @@ class IWORKXMLParserState (public)
   bool m_enableCollector;
   IWORKTableNameMapPtr_t m_tableNameMap;
   IWORKLanguageManager m_langManager;
-  std::shared_ptr<IWORKTable> m_currentTable;
-  std::shared_ptr<IWORKText> m_currentText;
+  boost::shared_ptr<IWORKTable> m_currentTable;
+  boost::shared_ptr<IWORKText> m_currentText;
 
 private:
   IWORKParser &m_parser;
--- src/lib/KEY1Token.cpp.orig	2017-10-04 07:49:01 UTC
+++ src/lib/KEY1Token.cpp
@@ -11,7 +11,8 @@
 
 #include <cassert>
 #include <cstring>
-#include <memory>
+
+#include <boost/make_shared.hpp>
 
 #include "IWORKTokenizerBase.h"
 
--- src/lib/KEY2Collector.cpp.orig	2017-05-16 07:53:14 UTC
+++ src/lib/KEY2Collector.cpp
@@ -9,7 +9,7 @@
 
 #include "KEY2Collector.h"
 
-#include <memory>
+#include <boost/make_shared.hpp>
 
 #include "IWORKRecorder.h"
 #include "IWORKTable.h"
@@ -25,19 +25,19 @@ KEY2Collector::KEY2Collector(IWORKDocumentInterface *c
 {
 }
 
-std::shared_ptr<IWORKTable> KEY2Collector::createTable(const IWORKTableNameMapPtr_t &tableNameMap, const IWORKLanguageManager &langManager) const
+boost::shared_ptr<IWORKTable> KEY2Collector::createTable(const IWORKTableNameMapPtr_t &tableNameMap, const IWORKLanguageManager &langManager) const
 {
-  const std::shared_ptr<IWORKTable> table(IWORKCollector::createTable(tableNameMap, langManager));
+  const boost::shared_ptr<IWORKTable> table(IWORKCollector::createTable(tableNameMap, langManager));
   if (m_paint)
-    table->setRecorder(std::make_shared<IWORKTableRecorder>());
+    table->setRecorder(boost::make_shared<IWORKTableRecorder>());
   return table;
 }
 
-std::shared_ptr<IWORKText> KEY2Collector::createText(const IWORKLanguageManager &langManager, const bool discardEmptyContent) const
+boost::shared_ptr<IWORKText> KEY2Collector::createText(const IWORKLanguageManager &langManager, const bool discardEmptyContent) const
 {
-  const std::shared_ptr<IWORKText> text(IWORKCollector::createText(langManager, discardEmptyContent));
+  const boost::shared_ptr<IWORKText> text(IWORKCollector::createText(langManager, discardEmptyContent));
   if (m_paint)
-    text->setRecorder(std::make_shared<IWORKTextRecorder>());
+    text->setRecorder(boost::make_shared<IWORKTextRecorder>());
   return text;
 }
 
--- src/lib/KEY2Collector.h.orig	2017-10-04 07:49:01 UTC
+++ src/lib/KEY2Collector.h
@@ -22,8 +22,8 @@ class KEY2Collector : public KEYCollector (public)
   explicit KEY2Collector(IWORKDocumentInterface *document);
 
 public:
-  std::shared_ptr<IWORKTable> createTable(const IWORKTableNameMapPtr_t &tableNameMap, const IWORKLanguageManager &langManager) const override;
-  std::shared_ptr<IWORKText> createText(const IWORKLanguageManager &langManager, bool discardEmptyContent = false) const override;
+  boost::shared_ptr<IWORKTable> createTable(const IWORKTableNameMapPtr_t &tableNameMap, const IWORKLanguageManager &langManager) const override;
+  boost::shared_ptr<IWORKText> createText(const IWORKLanguageManager &langManager, bool discardEmptyContent = false) const override;
 };
 
 } // namespace libetonyek
--- src/lib/KEY2Token.cpp.orig	2017-10-04 07:49:01 UTC
+++ src/lib/KEY2Token.cpp
@@ -11,7 +11,8 @@
 
 #include <cassert>
 #include <cstring>
-#include <memory>
+
+#include <boost/make_shared.hpp>
 
 #include "IWORKTokenizerBase.h"
 
--- src/lib/KEY6Parser.cpp.orig	2017-05-16 07:53:14 UTC
+++ src/lib/KEY6Parser.cpp
@@ -10,8 +10,9 @@
 
 #include <algorithm>
 #include <functional>
-#include <memory>
 
+#include <boost/make_shared.hpp>
+
 #include "IWAMessage.h"
 #include "IWAObjectType.h"
 #include "IWORKProperties.h"
@@ -22,6 +23,7 @@
 namespace libetonyek
 {
 
+using boost::make_shared;
 using boost::none;
 using boost::optional;
 
@@ -30,7 +32,6 @@ using namespace std::placeholders;
 using std::bind;
 using std::deque;
 using std::for_each;
-using std::make_shared;
 using std::string;
 
 KEY6Parser::KEY6Parser(const RVNGInputStreamPtr_t &fragments, const RVNGInputStreamPtr_t &package, KEYCollector &collector)
--- src/lib/KEYCollector.cpp.orig	2017-05-16 07:53:14 UTC
+++ src/lib/KEYCollector.cpp
@@ -243,7 +243,7 @@ void KEYCollector::endPage()
 {
   assert(m_pageOpened);
 
-  const std::shared_ptr<IWORKRecorder> recorder(m_recorder);
+  const boost::shared_ptr<IWORKRecorder> recorder(m_recorder);
   m_recorder.reset();
   if (recorder)
     recorder->replay(*this);
--- src/lib/KEYTypes_fwd.h.orig	2017-05-16 07:53:14 UTC
+++ src/lib/KEYTypes_fwd.h
@@ -9,10 +9,11 @@
 #ifndef KEYTYPES_FWD_H_INCLUDED
 #define KEYTYPES_FWD_H_INCLUDED
 
-#include <memory>
 #include <string>
 #include <unordered_map>
 
+#include <boost/shared_ptr.hpp>
+
 #include "IWORKTypes_fwd.h"
 
 namespace libetonyek
@@ -20,12 +21,12 @@ namespace libetonyek
 
 struct KEYLayer;
 
-typedef std::shared_ptr<KEYLayer> KEYLayerPtr_t;
+typedef boost::shared_ptr<KEYLayer> KEYLayerPtr_t;
 typedef std::unordered_map<ID_t, KEYLayerPtr_t> KEYLayerMap_t;
 
 struct KEYPlaceholder;
 
-typedef std::shared_ptr<KEYPlaceholder> KEYPlaceholderPtr_t;
+typedef boost::shared_ptr<KEYPlaceholder> KEYPlaceholderPtr_t;
 typedef std::unordered_map<ID_t, KEYPlaceholderPtr_t> KEYPlaceholderMap_t;
 
 }
--- src/lib/NUM1Token.cpp.orig	2017-10-04 07:49:01 UTC
+++ src/lib/NUM1Token.cpp
@@ -11,7 +11,8 @@
 
 #include <cassert>
 #include <cstring>
-#include <memory>
+
+#include <boost/make_shared.hpp>
 
 #include "IWORKTokenizerBase.h"
 
--- src/lib/PAG1Token.cpp.orig	2017-10-04 07:49:01 UTC
+++ src/lib/PAG1Token.cpp
@@ -11,7 +11,8 @@
 
 #include <cassert>
 #include <cstring>
-#include <memory>
+
+#include <boost/make_shared.hpp>
 
 #include "IWORKTokenizerBase.h"
 
--- src/lib/PAGCollector.cpp.orig	2017-05-16 07:53:14 UTC
+++ src/lib/PAGCollector.cpp
@@ -10,7 +10,8 @@
 #include "PAGCollector.h"
 
 #include <cassert>
-#include <memory>
+
+#include <boost/make_shared.hpp>
 
 #include "IWORKDocumentInterface.h"
 #include "IWORKOutputElements.h"
--- src/lib/contexts/IWORKListstyleElement.cpp.orig	2017-10-23 07:42:01 UTC
+++ src/lib/contexts/IWORKListstyleElement.cpp
@@ -9,9 +9,10 @@
 
 #include "IWORKListstyleElement.h"
 
-#include <memory>
 #include <utility>
 
+#include <boost/make_shared.hpp>
+
 #include "IWORKDictionary.h"
 #include "IWORKListLabelGeometriesProperty.h"
 #include "IWORKListLabelIndentsProperty.h"
@@ -68,7 +69,7 @@ void IWORKListstyleElement::endOfElement()
       levelProps[i].put<ListTextIndent>(m_textIndents[i]);
   }
   for (std::size_t i = 0; i != levels; ++i)
-    m_style[i] = std::make_shared<IWORKStyle>(levelProps[i], boost::none, boost::none);
+    m_style[i] = boost::make_shared<IWORKStyle>(levelProps[i], boost::none, boost::none);
 
   if (getId())
     getState().getDictionary().m_listStyles[get(getId())] = m_style;
--- src/lib/contexts/IWORKPropertyMapElement.cpp.orig	2017-10-23 07:42:01 UTC
+++ src/lib/contexts/IWORKPropertyMapElement.cpp
@@ -9,7 +9,7 @@
 
 #include "IWORKPropertyMapElement.h"
 
-#include <memory>
+#include <boost/make_shared.hpp>
 
 #include "libetonyek_xml.h"
 #include "IWORKCollector.h"
@@ -39,11 +39,11 @@
 namespace libetonyek
 {
 
+using boost::make_shared;
 using boost::none;
 using boost::optional;
 
 using std::deque;
-using std::make_shared;
 using std::string;
 
 namespace
--- src/lib/contexts/IWORKTabularInfoElement.cpp.orig	2017-10-23 07:42:01 UTC
+++ src/lib/contexts/IWORKTabularInfoElement.cpp
@@ -11,9 +11,9 @@
 
 #include <cassert>
 #include <ctime>
-#include <memory>
 
 #include <boost/lexical_cast.hpp>
+#include <boost/shared_ptr.hpp>
 
 #include "libetonyek_xml.h"
 #include "IWORKCollector.h"
@@ -36,8 +36,7 @@ namespace libetonyek
 
 using boost::lexical_cast;
 using boost::optional;
-
-using std::shared_ptr;
+using boost::shared_ptr;
 using std::string;
 
 namespace
--- src/lib/libetonyek_utils.h.orig	2017-08-11 08:01:41 UTC
+++ src/lib/libetonyek_utils.h
@@ -15,11 +15,12 @@
 #endif
 
 #include <cmath>
-#include <memory>
 #include <string>
 
 #include <boost/cstdint.hpp>
 
+#include <boost/shared_ptr.hpp>
+
 #include <librevenge/librevenge.h>
 #include <librevenge-stream/librevenge-stream.h>
 
@@ -79,7 +80,7 @@ struct EtonyekDummyDeleter
   void operator()(void *) {}
 };
 
-typedef std::shared_ptr<librevenge::RVNGInputStream> RVNGInputStreamPtr_t;
+typedef boost::shared_ptr<librevenge::RVNGInputStream> RVNGInputStreamPtr_t;
 
 uint8_t readU8(const RVNGInputStreamPtr_t &input, bool = false);
 uint16_t readU16(const RVNGInputStreamPtr_t &input, bool bigEndian=false);
--- src/lib/libetonyek_xml.cpp.orig	2017-05-16 07:53:14 UTC
+++ src/lib/libetonyek_xml.cpp
@@ -12,6 +12,7 @@
 #include <cassert>
 
 #include <boost/lexical_cast.hpp>
+#include <boost/make_shared.hpp>
 #include <boost/none.hpp>
 #include <boost/optional.hpp>
 
--- src/test/IWAFieldTest.cpp.orig	2017-04-06 18:20:50 UTC
+++ src/test/IWAFieldTest.cpp
@@ -11,7 +11,7 @@
 #include <iterator>
 #include <stdexcept>
 
-#include <memory>
+#include <boost/make_shared.hpp>
 
 #include <cppunit/TestFixture.h>
 #include <cppunit/extensions/HelperMacros.h>
@@ -29,7 +29,7 @@ namespace
 
 RVNGInputStreamPtr_t makeStream(const unsigned char *const bytes, const unsigned long length)
 {
-  return std::make_shared<IWORKMemoryStream>(bytes, length);
+  return boost::make_shared<IWORKMemoryStream>(bytes, length);
 }
 
 }
--- src/test/IWAMessageTest.cpp.orig	2017-04-06 18:20:50 UTC
+++ src/test/IWAMessageTest.cpp
@@ -7,7 +7,7 @@
  * file, You can obtain one at http://mozilla.org/MPL/2.0/.
  */
 
-#include <memory>
+#include <boost/make_shared.hpp>
 
 #include <cppunit/TestFixture.h>
 #include <cppunit/extensions/HelperMacros.h>
@@ -28,7 +28,7 @@ namespace
 
 RVNGInputStreamPtr_t makeStream(const unsigned char *const bytes, const unsigned long length)
 {
-  return std::make_shared<IWORKMemoryStream>(bytes, length);
+  return boost::make_shared<IWORKMemoryStream>(bytes, length);
 }
 
 }
--- src/test/IWAReaderTest.cpp.orig	2017-04-06 18:20:50 UTC
+++ src/test/IWAReaderTest.cpp
@@ -7,7 +7,7 @@
  * file, You can obtain one at http://mozilla.org/MPL/2.0/.
  */
 
-#include <memory>
+#include <boost/make_shared.hpp>
 
 #include <cppunit/TestFixture.h>
 #include <cppunit/extensions/HelperMacros.h>
@@ -28,7 +28,7 @@ namespace
 
 RVNGInputStreamPtr_t makeStream(const unsigned char *const bytes, const unsigned long length)
 {
-  return std::make_shared<IWORKMemoryStream>(bytes, length);
+  return boost::make_shared<IWORKMemoryStream>(bytes, length);
 }
 
 }
--- src/test/IWASnappyStreamTest.cpp.orig	2017-04-06 18:20:50 UTC
+++ src/test/IWASnappyStreamTest.cpp
@@ -11,7 +11,7 @@
 #include <cassert>
 #include <string>
 
-#include <memory>
+#include <boost/make_shared.hpp>
 
 #include <cppunit/TestFixture.h>
 #include <cppunit/extensions/HelperMacros.h>
--- src/test/IWORKStyleTest.cpp.orig	2017-04-06 18:29:51 UTC
+++ src/test/IWORKStyleTest.cpp
@@ -20,6 +20,7 @@ namespace test
 {
 
 using boost::optional;
+using boost::shared_ptr;
 
 using libetonyek::property::Answer;
 using libetonyek::property::Antwort;
@@ -31,7 +32,6 @@ using libetonyek::IWORKStylePtr_t;
 using libetonyek::IWORKStylesheet;
 using libetonyek::IWORKStylesheetPtr_t;
 
-using std::shared_ptr;
 using std::string;
 using std::unordered_map;
 
--- src/test/LibetonyekUtilsTest.cpp.orig	2017-04-06 18:20:50 UTC
+++ src/test/LibetonyekUtilsTest.cpp
@@ -8,9 +8,10 @@
  */
 
 #include <limits>
-#include <memory>
 #include <stdexcept>
 
+#include <boost/make_shared.hpp>
+
 #include <cppunit/TestFixture.h>
 #include <cppunit/extensions/HelperMacros.h>
 
@@ -33,7 +34,7 @@ namespace
 
 RVNGInputStreamPtr_t makeStream(const char *const bytes, const size_t len)
 {
-  return std::make_shared<IWORKMemoryStream>(reinterpret_cast<const unsigned char *>(bytes), len);
+  return boost::make_shared<IWORKMemoryStream>(reinterpret_cast<const unsigned char *>(bytes), len);
 }
 
 RVNGInputStreamPtr_t makeEmptyStream()
