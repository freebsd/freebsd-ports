Prevent qalc from segfaulting if started and immediately exited.
See: https://github.com/Qalculate/libqalculate/issues/38

diff --git a/libqalculate/Calculator.cc b/libqalculate/Calculator.cc
index f5c183f..4963351 100644
--- libqalculate/Calculator.cc.orig
+++ libqalculate/Calculator.cc
@@ -224,8 +226,11 @@ void autoConvert(const MathStructure &morig, MathStructure &mconv, const Evaluat
 void CalculateThread::run() {
 	enableAsynchronousCancel();
 	while(true) {
-		bool b_parse = read<bool>();
-		void *x = read<void *>();
+		bool failed = false;
+		bool b_parse = read<bool>(&failed);
+		if(failed) break;
+		void *x = read<void *>(&failed);
+		if(failed) break;
 		MathStructure *mstruct = (MathStructure*) x;
 		CALCULATOR->startControl();
 		if(b_parse) {
diff --git a/libqalculate/util.h b/libqalculate/util.h
index 0edcb50..533f5c7 100644
--- libqalculate/util.h.orig
+++ libqalculate/util.h
@@ -128,14 +128,16 @@ public:
 protected:
 	virtual void run() = 0;
 	void enableAsynchronousCancel();
-	template <class T> T read() {
+	template <class T> T read(bool *failed = NULL) {
 #ifdef _WIN32
 		MSG msg;
 		int ret = GetMessage(&msg, NULL, WM_USER, WM_USER);
+		if(failed && (ret == 0 || ret == -1)) *failed = true;
 		return (T) msg.wParam;
 #else
 		T x;
-		fread(&x, sizeof(T), 1, m_pipe_r);
+		int ret = fread(&x, sizeof(T), 1, m_pipe_r);
+		if(failed && ret != 1) *failed = true;
 		return x;
 #endif
 	}
diff --git a/src/qalc.cc b/src/qalc.cc
index 4a4e4b2..43c3556 100644
--- src/qalc.cc.orig
+++ src/qalc.cc
@@ -2821,12 +2821,15 @@ void on_abort_display() {
 
 void ViewThread::run() {
 	while(true) {
-	
-		void *x = read<void *>();
+
+		bool failed = false;
+		void *x = read<void *>(&failed);
+		if(failed) break;
 		MathStructure m(*((MathStructure*) x));
 		//bool b_stack = read<bool>();
-		read<bool>();
-		x = read<void *>();
+		read<bool>(&failed);
+		x = read<void *>(&failed);
+		if(failed) break;
 		CALCULATOR->startControl();
 		if(x) {
 			PrintOptions po;
