commit 624fc32db7733b47c8f9fbf5cbab3a40155032b2 (origin/master, origin/HEAD)
Parent: 44476241d101337d89bd9b7c88ec1280039d5167
Author:     Vasil Dimov <vd@FreeBSD.org>
AuthorDate: Wed Jun 26 09:46:55 2024 +0200
Commit:     Ken Sedgwick <ken@bonsai.com>
CommitDate: Wed Jul 24 11:32:53 2024 -0700

    Avoid vector out of bounds access in ParserExposedBuffer.cpp
    
    Accessing elements past the size of a `std::vector` is undefined
    behavior [1] and is actually checked in recent versions of LLVM
    libcxx, which is used in FreeBSD [2].
    
    [1] https://en.cppreference.com/w/cpp/container/vector/operator_at:
    > Accessing a nonexistent element through this operator is undefined
    > behavior.
    
    [2] https://cgit.freebsd.org/src/tree/contrib/llvm-project/libcxx/include/vector?h=2472e352d80fcf6440fd42fbb16960cc49d05b03#n1393

diff --git a/Jsmn/ParserExposedBuffer.cpp b/Jsmn/ParserExposedBuffer.cpp
index 2e42fd6..e6099da 100644
--- Jsmn/ParserExposedBuffer.cpp
+++ Jsmn/ParserExposedBuffer.cpp
@@ -102,21 +102,24 @@ private:
 			if (datum_ender.feed(buffer[end_idx++]))
 				break;
 			if (end_idx == load_idx)
 				return nullptr;
 		}
 		for (;;) {
+			if (start_idx == end_idx) {
+				return nullptr;
+			}
 			auto res = jsmn_parse( &base
 					     , &buffer[start_idx], end_idx - start_idx
 					     , &toks[0], toks.size()
 					     );
 			if (res > 0) {
 				assert(base.pos + start_idx <= end_idx);
 				auto pr = Detail::ParseResult();
-				auto text = std::string( &buffer[start_idx]
-						       , &buffer[start_idx + base.pos]
+				auto text = std::string( buffer.begin() + start_idx
+						       , buffer.begin() + start_idx + base.pos
 						       );
 				pr.orig_string = std::move(text);
 				pr.tokens.resize(res);
 				for (auto i = 0; i < res; ++i)
 					pr.tokens[i] = token_convert(toks[i]);
 
@@ -162,14 +165,14 @@ private:
 	 * In that case, retain our start_idx instead of
 	 * moving the data.
 	 */
 	void move_loaded() {
 		if ((load_idx - start_idx) > start_idx)
 			return;
-		std::copy( &buffer[start_idx], &buffer[load_idx]
-			 , &buffer[0]
+		std::copy( buffer.begin() + start_idx, buffer.begin() + load_idx
+			 , buffer.begin()
 			 );
 		load_idx -= start_idx;
 		end_idx -= start_idx;
 		start_idx = 0;
 	}
 public:
