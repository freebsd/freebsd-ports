#!/bin/sh

# Configuration settings for logstash in /etc/rc.conf:
#
# PROVIDE: logstash
# REQUIRE: DAEMON
# BEFORE:  LOGIN
# KEYWORD: shutdown
#
# logstash_enable (bool):
#   Default value: "NO"
#   Flag that determines whether Logstash is enabled.
#
# logstash_home (string):
#   Default value: "%%LOGSTASH_HOME%%"
#   Logstash installation directory.
#
# logstash_config (string):
#   Default value: %%LOCALBASE%%/etc/${name}/${name}.conf
#   Logstash configuration file path.
#
# logstash_log (bool):
#   Set to "NO" by default.
#   Set it to "YES" to enable logstash logging to file
#   Default output to /var/log/logstash.log
#
# logstash_log_file (string):
#   Default value: "${logdir}/${name}.log"
#   Log file path.
#
# logstash_java_home (string):
#   Default value: "%%JAVA_HOME%%"
#   Root directory of the desired Java SDK.
#   The JAVA_HOME environment variable is set with the contents of this
#   variable.
#
# logstash_java_opts (string):
#   Default value: ""
#   Options to pass to the Java Virtual Machine.
#   The JAVA_OPTS environment variable is set with the contents of this
#   variable.
#
# logstash_opts (string):
#   Default value: ""
#   Additional command line flags for logstash, eg. "-r"
#

. /etc/rc.subr

name=logstash
rcvar=logstash_enable

load_rc_config ${name}

logdir="/var/log"

: ${logstash_enable="NO"}
: ${logstash_home="%%LOGSTASH_HOME%%"}
: ${logstash_config="%%ETCDIR%%/${name}.conf"}
: ${logstash_settings_dir="%%ETCDIR%%"}
: ${logstash_log="YES"}
: ${logstash_log_dir="${logdir}/${name}"}
: ${logstash_java_home="%%JAVA_HOME%%"}
: ${logstash_java_opts=""}
: ${logstash_opts=""}
: ${logstash_user="%%USERS%%"}
: ${logstash_group="%%GROUPS%%"}

piddir=/var/run/${name}
pidfile=${piddir}/${name}.pid

if [ -d $piddir ]; then
  mkdir -p $piddir
fi

start_precmd="logstash_precmd"
status_cmd="logstash_status"
stop_cmd="logstash_stop"

logstash_cmd="${logstash_home}/bin/logstash"
procname="${logstash_java_home}/bin/java"

logstash_chdir=${logstash_home}
logstash_log_options=""

if checkyesno logstash_log; then
  logstash_log_options=" -l ${logstash_log_dir}"
fi

logstash_args="--path.settings ${logstash_settings_dir} -f ${logstash_config} ${logstash_log_options} ${logstash_opts}"

JAVA_OPTS="${logstash_java_opts}"
JAVA_HOME="${logstash_java_home}"
export JAVA_OPTS
export JAVA_HOME

command="/usr/sbin/daemon"
command_args="-f -p ${pidfile} ${logstash_cmd} ${logstash_args}"
required_files="${logstash_home} ${logstash_java_home} ${logstash_cmd} ${logstash_config}"

# Include %%LOCALBASE%%/bin in path because Logstash startup scripts
# assume bash is in path.
PATH=%%LOCALBASE%%/bin:$PATH

logstash_precmd()
{
    rc_pid=$(logstash_check_pidfile $pidfile)
    if [ -n "$rc_pid" ]; then
        [ -n "$rc_fast" ] && return 0
        echo "${name} is already running: $rc_pid"
        return 1
    fi
    touch ${pidfile}
    chown ${logstash_user}:${logstash_group} ${pidfile}
    /usr/bin/install -d -o ${logstash_user} -g ${logstash_group} -m 750 ${logstash_log_dir}
    /usr/bin/install -d -o ${logstash_user} -g ${logstash_group} -m 755 ${piddir}
}

logstash_status()
{
    rc_pid=$(logstash_check_pidfile $pidfile)
    if [ -n "$rc_pid" ]; then
        [ -n "$rc_fast" ] && return 0
        echo "${name} is already running: $rc_pid"
        return 1
    fi
    echo "${name} is running as pid ${rc_pid}."
}

logstash_stop()
{
    rc_pid=$(logstash_check_pidfile $pidfile)

    if [ -z "$rc_pid" ]; then
        [ -n "$rc_fast" ] && return 0
        echo "${name} not running? (check $pidfile)."
        return 1
    fi

    echo "Stopping ${name}."
    kill ${rc_pid} 2> /dev/null
    wait_for_pids ${rc_pid}
}

logstash_check_pidfile()
{
    _pidfile=$1
    if [ -z "$_pidfile" ]; then
        err 3 'USAGE: logstash_check_pidfile pidfile'
    fi
    if [ ! -f $_pidfile ]; then
        debug "pid file ($_pidfile): not readable."
        return
    fi
    read _pid _junk < $_pidfile
    if [ -z "$_pid" ]; then
        debug "pid file ($_pidfile): no pid in file."
        return
    fi
    if [ -n "`/usr/bin/su -m ${logstash_user} -c '%%LOCALBASE%%/bin/jps -l' | grep -e "^$_pid"`" ]; then
        echo -n $_pid
    fi
}

run_rc_command "$1"
