Drop after FreeBSD 14.0 EOL around 2024-09-30

In file included from ../src/pch/pch.hpp:1:
In file included from ../src/Compositor.hpp:7:
In file included from ../src/defines.hpp:2:
../src/debug/Log.hpp:58:35: error: call to consteval function 'std::basic_format_string<char, const std::chrono::hh_mm_ss<std::chrono::duration<long long, std::ratio<1, 1000000>>> &>::basic_format_string<char[6]>' is not a constant expression
            logMsg += std::format("[{}] ", hms);
                                  ^
/usr/include/c++/v1/__format/format_functions.h:341:46: note: initializer of '__types_' is not a constant expression
                           _Context{__types_.data(), __handles_.data(), sizeof...(_Args)});
                                             ^
../src/debug/Log.hpp:58:35: note: in call to 'basic_format_string("[{}] ")'
            logMsg += std::format("[{}] ", hms);
                                  ^
/usr/include/c++/v1/__format/format_functions.h:353:63: note: declared here
  static constexpr array<__format::__arg_t, sizeof...(_Args)> __types_{
                                                              ^

--- src/debug/Log.hpp.orig	2024-06-05 16:30:46.000000000 +0000
+++ src/debug/Log.hpp
@@ -51,11 +51,12 @@ namespace Debug {
 #ifndef _LIBCPP_VERSION
             const auto zt  = std::chrono::zoned_time{std::chrono::current_zone(), std::chrono::system_clock::now()};
             const auto hms = std::chrono::hh_mm_ss{zt.get_local_time() - std::chrono::floor<std::chrono::days>(zt.get_local_time())};
+            logMsg += std::format("[{}] ", hms);
 #else
             // TODO: current clang 17 does not support `zoned_time`, remove this once clang 19 is ready
-            const auto hms = std::chrono::hh_mm_ss{std::chrono::system_clock::now() - std::chrono::floor<std::chrono::days>(std::chrono::system_clock::now())};
+            auto c = std::chrono::hh_mm_ss{std::chrono::system_clock::now() - std::chrono::floor<std::chrono::days>(std::chrono::system_clock::now())};
+            logMsg += std::format("{:%H}:{:%M}:{:%S}", c.hours(), c.minutes(), c.subseconds());
 #endif
-            logMsg += std::format("[{}] ", hms);
         }
 
         // no need for try {} catch {} because std::format_string<Args...> ensures that vformat never throw std::format_error
