--- cargo-crates/v8-0.60.0/build/toolchain/gcc_toolchain.gni.orig	1970-01-01 01:00:00 UTC
+++ cargo-crates/v8-0.60.0/build/toolchain/gcc_toolchain.gni
@@ -53,6 +53,11 @@ if (enable_resource_allowlist_generation) {
       "enable_resource_allowlist_generation=true does not work for target_os=$target_os")
 }
 
+declare_args() {
+  extra_cxxflags = ""
+  extra_ldflags = ""
+}
+
 # This template defines a toolchain for something that works like gcc
 # (including clang).
 #
@@ -786,13 +791,23 @@ template("clang_toolchain") {
 # use_gold too.
 template("clang_toolchain") {
   gcc_toolchain(target_name) {
-    prefix = rebase_path("$clang_base_path/bin", root_build_dir)
-    cc = "${prefix}/clang"
-    cxx = "${prefix}/clang++"
-    ld = cxx
-    readelf = "${prefix}/llvm-readelf"
-    ar = "${prefix}/llvm-ar"
-    nm = "${prefix}/llvm-nm"
+    if (is_bsd) {
+      prefix = "%%LOCALBASE%%/bin"
+      cc = "cc"
+      cxx = "c++"
+      ld = cxx
+      readelf = "readelf"
+      ar = "llvm-ar"
+      nm = "${prefix}nm"
+    } else {
+      prefix = rebase_path("$clang_base_path/bin", root_build_dir)
+      cc = "$prefix/clang"
+      cxx = "$prefix/clang++"
+      ld = cxx
+      readelf = "${toolprefix}readelf"
+      ar = "${prefix}/llvm-ar"
+      nm = "${toolprefix}nm"
+    }
 
     forward_variables_from(invoker,
                            [
