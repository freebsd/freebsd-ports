commit 21002a635bf3da33367592e3a3ab3cce24fe5299
Author: John Baldwin <jhb@FreeBSD.org>
Date:   Tue Jan 19 11:02:09 2016 -0800

    Handle void * conversions in FreeBSD/x86 native code to fix C++ build.
    
    gdb/ChangeLog:
    
    	* amd64bsd-nat.c (amd64bsd_fetch_inferior_registers): Change xstateregs
    	to void *.
    	(amd64bsd_store_inferior_registers): Likewise.
    	* fbsd-nat.c (resume_one_thread_cb): Explicitly cast data to ptid_t *.
    	(resume_all_threads_cb): Likewise.
    	* i386bsd-nat.c (i386bsd_supply_gregset): Cast gregs to char *.
    	(i386bsd_collect_gregset): Likewise.
    	(i386bsd_fetch_inferior_registers): Change xstateregs to void *.
    	(i386bsd_store_inferior_registers): Likewise.

diff --git gdb/amd64bsd-nat.c gdb/amd64bsd-nat.c
index fb7e4fa..e278a91 100644
--- gdb/amd64bsd-nat.c
+++ gdb/amd64bsd-nat.c
@@ -65,7 +65,7 @@ amd64bsd_fetch_inferior_registers (struct target_ops *ops,
     {
       struct fpreg fpregs;
 #ifdef PT_GETXSTATE_INFO
-      char *xstateregs;
+      void *xstateregs;
 
       if (amd64bsd_xsave_len != 0)
 	{
@@ -118,7 +118,7 @@ amd64bsd_store_inferior_registers (struct target_ops *ops,
     {
       struct fpreg fpregs;
 #ifdef PT_GETXSTATE_INFO
-      char *xstateregs;
+      void *xstateregs;
 
       if (amd64bsd_xsave_len != 0)
 	{
diff --git gdb/fbsd-nat.c gdb/fbsd-nat.c
index bdf078e..b582abe 100644
--- gdb/fbsd-nat.c
+++ gdb/fbsd-nat.c
@@ -428,7 +428,7 @@ static void (*super_resume) (struct target_ops *,
 static int
 resume_one_thread_cb (struct thread_info *tp, void *data)
 {
-  ptid_t *ptid = data;
+  ptid_t *ptid = (ptid_t *) data;
   int request;
 
   if (ptid_get_pid (tp->ptid) != ptid_get_pid (*ptid))
@@ -447,7 +447,7 @@ resume_one_thread_cb (struct thread_info *tp, void *data)
 static int
 resume_all_threads_cb (struct thread_info *tp, void *data)
 {
-  ptid_t *filter = data;
+  ptid_t *filter = (ptid_t *) data;
 
   if (!ptid_match (tp->ptid, *filter))
     return 0;
diff --git gdb/i386bsd-nat.c gdb/i386bsd-nat.c
index 5d45c33..f5f4a0f 100644
--- gdb/i386bsd-nat.c
+++ gdb/i386bsd-nat.c
@@ -92,7 +92,7 @@ size_t i386bsd_xsave_len;
 static void
 i386bsd_supply_gregset (struct regcache *regcache, const void *gregs)
 {
-  const char *regs = gregs;
+  const char *regs = (const char *) gregs;
   int regnum;
 
   for (regnum = 0; regnum < ARRAY_SIZE (i386bsd_r_reg_offset); regnum++)
@@ -112,7 +112,7 @@ static void
 i386bsd_collect_gregset (const struct regcache *regcache,
 			 void *gregs, int regnum)
 {
-  char *regs = gregs;
+  char *regs = (char *) gregs;
   int i;
 
   for (i = 0; i < ARRAY_SIZE (i386bsd_r_reg_offset); i++)
@@ -157,7 +157,7 @@ i386bsd_fetch_inferior_registers (struct target_ops *ops,
 #ifdef PT_GETXSTATE_INFO
       if (i386bsd_xsave_len != 0)
 	{
-	  char *xstateregs;
+	  void *xstateregs;
 
 	  xstateregs = alloca (i386bsd_xsave_len);
 	  if (ptrace (PT_GETXSTATE, get_ptrace_pid (inferior_ptid),
@@ -227,7 +227,7 @@ i386bsd_store_inferior_registers (struct target_ops *ops,
 #ifdef PT_GETXSTATE_INFO
       if (i386bsd_xsave_len != 0)
 	{
-	  char *xstateregs;
+	  void *xstateregs;
 
 	  xstateregs = alloca (i386bsd_xsave_len);
 	  if (ptrace (PT_GETXSTATE, get_ptrace_pid (inferior_ptid),
