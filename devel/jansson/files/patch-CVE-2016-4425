--- src/jansson_config.h.in.orig	2016-05-16 10:22:34.333432000 +0800
+++ src/jansson_config.h.in	2016-05-16 10:23:18.042096000 +0800
@@ -36,4 +36,8 @@
    otherwise to 0. */
 #define JSON_HAVE_LOCALECONV @json_have_localeconv@
 
+/* Maximum recursion depth for parsing JSON input.
+   This limits the depth of e.g. array-within-array constructions. */
+#define JSON_PARSER_MAX_DEPTH 2048
+
 #endif
--- src/load.c.orig	2014-10-02 12:59:26.000000000 +0800
+++ src/load.c	2016-05-16 10:21:41.006239000 +0800
@@ -61,6 +61,7 @@ typedef struct {
 typedef struct {
     stream_t stream;
     strbuffer_t saved_text;
+    size_t depth;
     int token;
     union {
         struct {
@@ -800,6 +801,12 @@ static json_t *parse_value(lex_t *lex, s
     json_t *json;
     double value;
 
+    lex->depth++;
+    if(lex->depth > JSON_PARSER_MAX_DEPTH) {
+        error_set(error, lex, "maximum parsing depth reached");
+        return NULL;
+    }
+
     switch(lex->token) {
         case TOKEN_STRING: {
             const char *value = lex->value.string.val;
@@ -870,6 +877,7 @@ static json_t *parse_value(lex_t *lex, s
     if(!json)
         return NULL;
 
+    lex->depth--;
     return json;
 }
 
@@ -877,6 +885,8 @@ static json_t *parse_json(lex_t *lex, si
 {
     json_t *result;
 
+    lex->depth = 0;
+
     lex_scan(lex, error);
     if(!(flags & JSON_DECODE_ANY)) {
         if(lex->token != '[' && lex->token != '{') {
