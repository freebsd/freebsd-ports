The psqueues package provides Priority Search Queues in three different flavors.

 * OrdPSQ k p v, which uses the Ord k instance to provide fast insertion,
   deletion and lookup. This implementation is based on Ralf Hinze's A Simple
   Implementation Technique for Priority Search Queues. Hence, it is similar to
   the PSQueue library, although it is considerably faster and provides a
   slightly different API.

 * IntPSQ p v is a far more efficient implementation. It fixes the key type to
   Int and uses a radix tree (like IntMap) with an additional min-heap property.

 * HashPSQ k p v is a fairly straightforward extension of IntPSQ: it simply
   uses the keys' hashes as indices in the IntPSQ. If there are any hash
   collisions, it uses an OrdPSQ to resolve those. The performance of this
   implementation is comparable to that of IntPSQ, but it is more widely
   applicable since the keys are not restricted to Int, but rather to any
   Hashable datatype.

Each of the three implementations provides the same API, so they can be used interchangeably. The benchmarks show how they perform relative to one another, and also compared to the other Priority Search Queue implementations on Hackage: PSQueue and fingertree-psqueue.

WWW: https://hackage.haskell.org/package/psqueues
