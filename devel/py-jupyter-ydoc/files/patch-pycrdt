--- jupyter_ydoc/__init__.py.orig	2020-02-02 00:00:00 UTC
+++ jupyter_ydoc/__init__.py
@@ -3,11 +3,11 @@ import sys
 
 import sys
 
-from ._version import __version__  # noqa
-from .yblob import YBlob  # noqa
-from .yfile import YFile  # noqa
-from .ynotebook import YNotebook  # noqa
-from .yunicode import YUnicode  # noqa
+from ._version import __version__ as __version__
+from .yblob import YBlob as YBlob
+from .yfile import YFile as YFile
+from .ynotebook import YNotebook as YNotebook
+from .yunicode import YUnicode as YUnicode
 
 # See compatibility note on `group` keyword in
 # https://docs.python.org/3/library/importlib.metadata.html#entry-points
--- jupyter_ydoc/ybasedoc.py.orig	2020-02-02 00:00:00 UTC
+++ jupyter_ydoc/ybasedoc.py
@@ -2,9 +2,9 @@ from abc import ABC, abstractmethod
 # Distributed under the terms of the Modified BSD License.
 
 from abc import ABC, abstractmethod
-from typing import Any, Callable, Dict, Optional
+from typing import Any, Callable, Optional
 
-from pycrdt import Doc, Map
+from pycrdt import Doc, Map, Subscription, UndoManager
 
 
 class YBaseDoc(ABC):
@@ -15,6 +15,11 @@ class YBaseDoc(ABC):
     subscribe to changes in the document.
     """
 
+    _ydoc: Doc
+    _ystate: Map
+    _subscriptions: dict[Any, Subscription]
+    _undo_manager: UndoManager
+
     def __init__(self, ydoc: Optional[Doc] = None):
         """
         Constructs a YBaseDoc.
@@ -26,8 +31,9 @@ class YBaseDoc(ABC):
             self._ydoc = Doc()
         else:
             self._ydoc = ydoc
-        self._ydoc["state"] = self._ystate = Map()
-        self._subscriptions: Dict[Any, str] = {}
+        self._ystate = self._ydoc.get("state", type=Map)
+        self._subscriptions = {}
+        self._undo_manager = UndoManager(doc=self._ydoc, capture_timeout_millis=0)
 
     @property
     @abstractmethod
@@ -40,6 +46,15 @@ class YBaseDoc(ABC):
         """
 
     @property
+    def undo_manager(self) -> UndoManager:
+        """
+        A :class:`pycrdt.UndoManager` for the document.
+
+        :return: The document's undo manager.
+        :rtype: :class:`pycrdt.UndoManager`
+        """
+        return self._undo_manager
+
     def ystate(self) -> Map:
         """
         A :class:`pycrdt.Map` containing the state of the document.
--- jupyter_ydoc/yblob.py.orig	2020-02-02 00:00:00 UTC
+++ jupyter_ydoc/yblob.py
@@ -36,7 +36,8 @@ class YBlob(YBaseDoc):
         :type ydoc: :class:`pycrdt.Doc`, optional.
         """
         super().__init__(ydoc)
-        self._ydoc["source"] = self._ysource = Map()
+        self._ysource = self._ydoc.get("source", type=Map)
+        self.undo_manager.expand_scope(self._ysource)
 
     @property
     def version(self) -> str:
--- jupyter_ydoc/ynotebook.py.orig	2020-02-02 00:00:00 UTC
+++ jupyter_ydoc/ynotebook.py
@@ -54,8 +54,9 @@ class YNotebook(YBaseDoc):
         :type ydoc: :class:`pycrdt.Doc`, optional.
         """
         super().__init__(ydoc)
-        self._ydoc["meta"] = self._ymeta = Map()
-        self._ydoc["cells"] = self._ycells = Array()
+        self._ymeta = self._ydoc.get("meta", type=Map)
+        self._ycells = self._ydoc.get("cells", type=Array)
+        self.undo_manager.expand_scope(self._ycells)
 
     @property
     def version(self) -> str:
--- jupyter_ydoc/yunicode.py.orig	2020-02-02 00:00:00 UTC
+++ jupyter_ydoc/yunicode.py
@@ -31,7 +31,8 @@ class YUnicode(YBaseDoc):
         :type ydoc: :class:`pycrdt.Doc`, optional.
         """
         super().__init__(ydoc)
-        self._ydoc["source"] = self._ysource = Text()
+        self._ysource = self._ydoc.get("source", type=Text)
+        self.undo_manager.expand_scope(self._ysource)
 
     @property
     def version(self) -> str:
--- pyproject.toml.orig	2020-02-02 00:00:00 UTC
+++ pyproject.toml
@@ -13,7 +13,7 @@ dependencies = [
 keywords = ["jupyter", "ypy"]
 dependencies = [
     "importlib_metadata >=3.6; python_version<'3.10'",
-    "pycrdt >=0.8.1,<0.9.0",
+    "pycrdt >=0.9.0,<0.10.0",
 ]
 
 [[project.authors]]
