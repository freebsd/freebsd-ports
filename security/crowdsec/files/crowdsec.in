#!/bin/sh

# PROVIDE: crowdsec
# BEFORE: crowdsec_firewall
# REQUIRE: LOGIN DAEMON NETWORKING
# KEYWORD: shutdown
#
# Add the following lines to /etc/rc.conf.local or /etc/rc.conf
# to enable this service:
#
# crowdsec_enable (bool):	Set it to YES to enable crowdsec agent.
#				Default is "NO".
# crowdsec_config (str):	Set the agent config path.
#				Default is "%%PREFIX%%/etc/crowdsec/config.yaml".
# crowdsec_machine_name (str):	Name for the crowdsec instance when it's running its own lapi.
#				Default is "localhost".
# crowdsec_flags (str):	Set the extra flags to run the agent.
#				Default is ""

. /etc/rc.subr

name=crowdsec
desc="Crowdsec Agent"
rcvar=crowdsec_enable

load_rc_config "$name"

: "${crowdsec_enable:=NO}"
: "${crowdsec_config:=%%PREFIX%%/etc/crowdsec/config.yaml}"
: "${crowdsec_machine_name:=localhost}"
: "${crowdsec_flags:=}"

pidfile=/var/run/${name}.pid
required_files="$crowdsec_config"
command="%%PREFIX%%/bin/${name}"
start_cmd="${name}_start"
stop_cmd="${name}_stop"
start_precmd="${name}_precmd"
configtest_cmd="${name}_configtest"
extra_commands="configtest reload"

crowdsec_precmd() {
    cs_cli() {
        "%%PREFIX%%/bin/cscli" -c "${crowdsec_config}" "$@"
    }
    Config() {
        cs_cli config show --key "Config.$1"
    }

    HUB_DIR=$(Config ConfigPaths.HubDir)
    if ! ls -1qA "$HUB_DIR"/* >/dev/null 2>&1; then
        echo "Fetching hub inventory"
        cs_cli hub update || :
    fi

    CONFIG_DIR=$(Config ConfigPaths.ConfigDir)

    # Is the LAPI enabled on this node?
    if [ "$(cs_cli config show --key Config.API.Server.Enable)" != "false" ]; then

        # There are no machines, we create the main one
        if [ "$(cs_cli machines list -o json)" = "[]" ]; then
            echo "Registering LAPI"
            cs_cli machines add "${crowdsec_machine_name}" --auto --force --error || :
        fi

        # Register to the central server to receive the community blocklist and more
        if [ ! -s "${CONFIG_DIR}/online_api_credentials.yaml" ]; then
            echo "Registering CAPI"
            cs_cli capi register || :
        fi

    fi

    # This would work but takes 30secs to timeout while reading the metrics, because crowdsec is not running yet.
    #    cs_cli collections inspect crowdsecurity/freebsd 2>/dev/null | grep ^installed | grep -q true || \
    #        cs_cli collections install crowdsecurity/freebsd || :

    # So we just check for the file
    if [ ! -e "${CONFIG_DIR}/collections/freebsd.yaml" ]; then
        cs_cli collections install crowdsecurity/freebsd || :
    fi
}

crowdsec_stop()
{
    if [ ! -f "$pidfile" ]; then
        echo "${name} is not running."
        return
    fi
    pid=$(cat "$pidfile")
    if kill -0 "$pid" >/dev/null 2>&1; then
        echo "Stopping ${name}."
        kill -s TERM "$pid" >/dev/null 2>&1
        # shellcheck disable=SC2034
        for i in $(seq 1 20); do
            sleep 1
            if ! kill -0 "$pid" >/dev/null 2>&1; then
                rm -f "$pidfile"
                return
            fi
        done
        echo "Timeout, terminating ${name} with SIGKILL."
        kill -s KILL "$pid" >/dev/null 2>&1
        rm -f "$pidfile"
    else
        echo "${name} is not running."
    fi
}

crowdsec_start()
{
    /usr/sbin/daemon -f -p "$pidfile" -t "$desc" -- \
        "$command" -c "$crowdsec_config" ${crowdsec_flags}
}

crowdsec_configtest()
{
    echo "Performing sanity check on ${name} configuration."
    if "$command" -c "$crowdsec_config" -t -error; then
        echo "Configuration test OK"
    fi
}

run_rc_command "$1"
